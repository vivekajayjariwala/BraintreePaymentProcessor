{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable new-cap */\nlet xml2js = require(\"xml2js\");\nlet Digest = require(\"./digest\").Digest;\nlet Gateway = require(\"./gateway\").Gateway;\nlet exceptions = require(\"./exceptions\");\nlet Util = require(\"./util\").Util;\nlet WebhookNotification = require(\"./webhook_notification\").WebhookNotification;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass WebhookNotificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  parse(signature, payload) {\n    if (!signature) {\n      return Promise.reject(exceptions.InvalidSignatureError(\"signature parameter is required\"));\n    }\n    if (!payload) {\n      return Promise.reject(exceptions.InvalidSignatureError(\"payload parameter is required\"));\n    }\n    if (payload.match(/[^A-Za-z0-9+=\\/\\n]/)) {\n      return Promise.reject(exceptions.InvalidSignatureError(\"payload contains illegal characters\"));\n    }\n    let err = this.validateSignature(signature, payload);\n    if (err) {\n      return Promise.reject(err);\n    }\n    const xmlPayload = Buffer.from(payload, \"base64\").toString(\"utf8\");\n    return xml2js.parseStringPromise(xmlPayload, {\n      attrkey: \"@\",\n      charkey: \"#\",\n      explicitArray: false\n    }).then(result => {\n      const attributes = Util.convertNodeToObject(result);\n      const handler = this.createResponseHandler(\"notification\", WebhookNotification);\n      return handler(attributes);\n    }).then(responseHandlerResponse => {\n      return responseHandlerResponse.notification;\n    });\n  }\n  validateSignature(signatureString, payload) {\n    let signaturePairs = signatureString.split(\"&\").filter(pair => pair.indexOf(\"|\") !== -1).map(pair => pair.split(\"|\"));\n    let signature = this.matchingSignature(signaturePairs);\n    if (!signature) {\n      return exceptions.InvalidSignatureError(\"no matching public key\");\n    }\n    let self = this;\n    const matches = [payload, `${payload}\\n`].some(data => Digest.secureCompare(signature, Digest.Sha1hexdigest(self.gateway.config.privateKey, data)));\n    if (!matches) {\n      return exceptions.InvalidSignatureError(\"signature does not match payload - one has been modified\");\n    }\n    return null;\n  }\n  verify(challenge, callback) {\n    if (!challenge.match(/^[a-f0-9]{20,32}$/)) {\n      if (callback != null) {\n        callback(exceptions.InvalidChallengeError(\"challenge contains non-hex characters\"), null);\n        return;\n      }\n      throw exceptions.InvalidChallengeError(\"challenge contains non-hex characters\");\n    }\n    let digest = Digest.Sha1hexdigest(this.gateway.config.privateKey, challenge);\n    return `${this.gateway.config.publicKey}|${digest}`; // eslint-disable-line consistent-return\n  }\n\n  matchingSignature(signaturePairs) {\n    for (let keyPair of signaturePairs) {\n      let publicKey = keyPair[0];\n      let signature = keyPair[1];\n      if (this.gateway.config.publicKey === publicKey) {\n        return signature;\n      }\n    }\n    return null;\n  }\n}\nmodule.exports = {\n  WebhookNotificationGateway: wrapPrototype(WebhookNotificationGateway, {\n    ignoreMethods: [\"verify\"]\n  })\n};","map":{"version":3,"names":["xml2js","require","Digest","Gateway","exceptions","Util","WebhookNotification","wrapPrototype","WebhookNotificationGateway","constructor","gateway","config","parse","signature","payload","Promise","reject","InvalidSignatureError","match","err","validateSignature","xmlPayload","Buffer","from","toString","parseStringPromise","attrkey","charkey","explicitArray","then","result","attributes","convertNodeToObject","handler","createResponseHandler","responseHandlerResponse","notification","signatureString","signaturePairs","split","filter","pair","indexOf","map","matchingSignature","self","matches","some","data","secureCompare","Sha1hexdigest","privateKey","verify","challenge","callback","InvalidChallengeError","digest","publicKey","keyPair","module","exports","ignoreMethods"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/webhook_notification_gateway.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable new-cap */\n\nlet xml2js = require(\"xml2js\");\nlet Digest = require(\"./digest\").Digest;\nlet Gateway = require(\"./gateway\").Gateway;\nlet exceptions = require(\"./exceptions\");\nlet Util = require(\"./util\").Util;\nlet WebhookNotification = require(\"./webhook_notification\").WebhookNotification;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass WebhookNotificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  parse(signature, payload) {\n    if (!signature) {\n      return Promise.reject(\n        exceptions.InvalidSignatureError(\"signature parameter is required\")\n      );\n    }\n    if (!payload) {\n      return Promise.reject(\n        exceptions.InvalidSignatureError(\"payload parameter is required\")\n      );\n    }\n    if (payload.match(/[^A-Za-z0-9+=\\/\\n]/)) {\n      return Promise.reject(\n        exceptions.InvalidSignatureError(\"payload contains illegal characters\")\n      );\n    }\n    let err = this.validateSignature(signature, payload);\n\n    if (err) {\n      return Promise.reject(err);\n    }\n\n    const xmlPayload = Buffer.from(payload, \"base64\").toString(\"utf8\");\n\n    return xml2js\n      .parseStringPromise(xmlPayload, {\n        attrkey: \"@\",\n        charkey: \"#\",\n        explicitArray: false,\n      })\n      .then((result) => {\n        const attributes = Util.convertNodeToObject(result);\n        const handler = this.createResponseHandler(\n          \"notification\",\n          WebhookNotification\n        );\n\n        return handler(attributes);\n      })\n      .then((responseHandlerResponse) => {\n        return responseHandlerResponse.notification;\n      });\n  }\n\n  validateSignature(signatureString, payload) {\n    let signaturePairs = signatureString\n      .split(\"&\")\n      .filter((pair) => pair.indexOf(\"|\") !== -1)\n      .map((pair) => pair.split(\"|\"));\n    let signature = this.matchingSignature(signaturePairs);\n\n    if (!signature) {\n      return exceptions.InvalidSignatureError(\"no matching public key\");\n    }\n\n    let self = this;\n    const matches = [payload, `${payload}\\n`].some((data) =>\n      Digest.secureCompare(\n        signature,\n        Digest.Sha1hexdigest(self.gateway.config.privateKey, data)\n      )\n    );\n\n    if (!matches) {\n      return exceptions.InvalidSignatureError(\n        \"signature does not match payload - one has been modified\"\n      );\n    }\n\n    return null;\n  }\n\n  verify(challenge, callback) {\n    if (!challenge.match(/^[a-f0-9]{20,32}$/)) {\n      if (callback != null) {\n        callback(\n          exceptions.InvalidChallengeError(\n            \"challenge contains non-hex characters\"\n          ),\n          null\n        );\n\n        return;\n      }\n\n      throw exceptions.InvalidChallengeError(\n        \"challenge contains non-hex characters\"\n      );\n    }\n    let digest = Digest.Sha1hexdigest(\n      this.gateway.config.privateKey,\n      challenge\n    );\n\n    return `${this.gateway.config.publicKey}|${digest}`; // eslint-disable-line consistent-return\n  }\n\n  matchingSignature(signaturePairs) {\n    for (let keyPair of signaturePairs) {\n      let publicKey = keyPair[0];\n      let signature = keyPair[1];\n\n      if (this.gateway.config.publicKey === publicKey) {\n        return signature;\n      }\n    }\n\n    return null;\n  }\n}\n\nmodule.exports = {\n  WebhookNotificationGateway: wrapPrototype(WebhookNotificationGateway, {\n    ignoreMethods: [\"verify\"],\n  }),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}