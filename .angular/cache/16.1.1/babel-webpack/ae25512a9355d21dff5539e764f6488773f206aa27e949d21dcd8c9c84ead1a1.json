{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable no-console, new-cap */\nlet Gateway = require(\"./gateway\").Gateway;\nlet ApplePayCard = require(\"./apple_pay_card\").ApplePayCard;\nlet AndroidPayCard = require(\"./android_pay_card\").AndroidPayCard;\nlet CreditCard = require(\"./credit_card\").CreditCard;\nlet PaymentMethodParser = require(\"./payment_method_parser\").PaymentMethodParser;\nlet PayPalAccount = require(\"./paypal_account\").PayPalAccount;\nlet PaymentMethodNonce = require(\"./payment_method_nonce\").PaymentMethodNonce;\nlet SepaDirectDebitAccount = require(\"./sepa_direct_debit_account\").SepaDirectDebitAccount;\nlet Util = require(\"./util\").Util;\nlet exceptions = require(\"./exceptions\");\nlet querystring = require(\"../../vendor/querystring.node.js.511d6a2/querystring\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass PaymentMethodGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  responseHandler() {\n    let responseMapping = {\n      paypalAccount: PayPalAccount,\n      sepaDirectDebitAccount: SepaDirectDebitAccount,\n      creditCard: CreditCard,\n      applePayCard: ApplePayCard,\n      // NEXT_MAJOR_VERSION rename Android Pay to Google Pay\n      androidPayCard: AndroidPayCard,\n      paymentMethodNonce: PaymentMethodNonce\n    };\n    let handler = this.createResponseHandler(responseMapping, null);\n    return function (payload) {\n      return handler(payload).then(function (response) {\n        let parsedResponse = PaymentMethodParser.parsePaymentMethod(response);\n        if (parsedResponse instanceof PaymentMethodNonce) {\n          response.paymentMethodNonce = parsedResponse;\n        } else {\n          response.paymentMethod = parsedResponse;\n        }\n        return response;\n      });\n    };\n  }\n  create(attributes) {\n    this._checkForDeprecatedAttributes(attributes);\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods`, {\n      paymentMethod: attributes\n    }).then(this.responseHandler());\n  }\n  find(token) {\n    if (token.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null);\n    }\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/any/${token}`).then(response => {\n      return PaymentMethodParser.parsePaymentMethod(response);\n    });\n  }\n  update(token, attributes) {\n    if (token.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null);\n    }\n    this._checkForDeprecatedAttributes(attributes);\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/payment_methods/any/${token}`, {\n      paymentMethod: attributes\n    }).then(this.responseHandler());\n  }\n  grant(token, attributes) {\n    if (token.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null);\n    }\n    let grantOptions = {\n      sharedPaymentMethodToken: token\n    };\n    if (typeof attributes === \"boolean\") {\n      // eslint-disable-next-line camelcase\n      attributes = {\n        allow_vaulting: attributes\n      };\n    }\n    grantOptions = Util.merge(grantOptions, attributes);\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/grant`, {\n      // eslint-disable-next-line camelcase\n      payment_method: grantOptions\n    }).then(this.responseHandler());\n  }\n  revoke(token) {\n    if (token.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null);\n    }\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/revoke`, {\n      // eslint-disable-next-line camelcase\n      payment_method: {\n        sharedPaymentMethodToken: token\n      }\n    }).then(this.responseHandler());\n  }\n  delete(token, options) {\n    let queryParam, invalidKeysError;\n    if (typeof options === \"function\") {\n      options = null;\n    }\n    invalidKeysError = Util.verifyKeys(this._deleteSignature(), options);\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n    queryParam = options != null ? \"?\" + querystring.stringify(Util.convertObjectKeysToUnderscores(options)) : \"\";\n    return this.gateway.http.delete(this.config.baseMerchantPath() + \"/payment_methods/any/\" + token + queryParam);\n  }\n  _deleteSignature() {\n    return {\n      valid: [\"revokeAllGrants\"]\n    };\n  }\n  _checkForDeprecatedAttributes(attributes) {\n    if (attributes.deviceSessionId != null) {\n      console.warn(\"[DEPRECATED] `deviceSessionId` is a deprecated param for PaymentMethod objects. Use `deviceData` instead\");\n    }\n    if (attributes.fraudMerchantId != null) {\n      console.warn(\"[DEPRECATED] `fraudMerchantId` is a deprecated param for PaymentMethod objects. Use `deviceData` instead\");\n    }\n  }\n}\nmodule.exports = {\n  PaymentMethodGateway: wrapPrototype(PaymentMethodGateway)\n};","map":{"version":3,"names":["Gateway","require","ApplePayCard","AndroidPayCard","CreditCard","PaymentMethodParser","PayPalAccount","PaymentMethodNonce","SepaDirectDebitAccount","Util","exceptions","querystring","wrapPrototype","PaymentMethodGateway","constructor","gateway","config","responseHandler","responseMapping","paypalAccount","sepaDirectDebitAccount","creditCard","applePayCard","androidPayCard","paymentMethodNonce","handler","createResponseHandler","payload","then","response","parsedResponse","parsePaymentMethod","paymentMethod","create","attributes","_checkForDeprecatedAttributes","http","post","baseMerchantPath","find","token","trim","Promise","reject","NotFoundError","get","update","put","grant","grantOptions","sharedPaymentMethodToken","allow_vaulting","merge","payment_method","revoke","delete","options","queryParam","invalidKeysError","verifyKeys","_deleteSignature","stringify","convertObjectKeysToUnderscores","valid","deviceSessionId","console","warn","fraudMerchantId","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/payment_method_gateway.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable no-console, new-cap */\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet ApplePayCard = require(\"./apple_pay_card\").ApplePayCard;\nlet AndroidPayCard = require(\"./android_pay_card\").AndroidPayCard;\nlet CreditCard = require(\"./credit_card\").CreditCard;\nlet PaymentMethodParser =\n  require(\"./payment_method_parser\").PaymentMethodParser;\nlet PayPalAccount = require(\"./paypal_account\").PayPalAccount;\nlet PaymentMethodNonce = require(\"./payment_method_nonce\").PaymentMethodNonce;\nlet SepaDirectDebitAccount =\n  require(\"./sepa_direct_debit_account\").SepaDirectDebitAccount;\nlet Util = require(\"./util\").Util;\nlet exceptions = require(\"./exceptions\");\nlet querystring = require(\"../../vendor/querystring.node.js.511d6a2/querystring\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass PaymentMethodGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  responseHandler() {\n    let responseMapping = {\n      paypalAccount: PayPalAccount,\n      sepaDirectDebitAccount: SepaDirectDebitAccount,\n      creditCard: CreditCard,\n      applePayCard: ApplePayCard,\n      // NEXT_MAJOR_VERSION rename Android Pay to Google Pay\n      androidPayCard: AndroidPayCard,\n      paymentMethodNonce: PaymentMethodNonce,\n    };\n    let handler = this.createResponseHandler(responseMapping, null);\n\n    return function (payload) {\n      return handler(payload).then(function (response) {\n        let parsedResponse = PaymentMethodParser.parsePaymentMethod(response);\n\n        if (parsedResponse instanceof PaymentMethodNonce) {\n          response.paymentMethodNonce = parsedResponse;\n        } else {\n          response.paymentMethod = parsedResponse;\n        }\n\n        return response;\n      });\n    };\n  }\n\n  create(attributes) {\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http\n      .post(`${this.config.baseMerchantPath()}/payment_methods`, {\n        paymentMethod: attributes,\n      })\n      .then(this.responseHandler());\n  }\n\n  find(token) {\n    if (token.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null);\n    }\n\n    return this.gateway.http\n      .get(`${this.config.baseMerchantPath()}/payment_methods/any/${token}`)\n      .then((response) => {\n        return PaymentMethodParser.parsePaymentMethod(response);\n      });\n  }\n\n  update(token, attributes) {\n    if (token.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null);\n    }\n\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http\n      .put(`${this.config.baseMerchantPath()}/payment_methods/any/${token}`, {\n        paymentMethod: attributes,\n      })\n      .then(this.responseHandler());\n  }\n\n  grant(token, attributes) {\n    if (token.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null);\n    }\n\n    let grantOptions = {\n      sharedPaymentMethodToken: token,\n    };\n\n    if (typeof attributes === \"boolean\") {\n      // eslint-disable-next-line camelcase\n      attributes = { allow_vaulting: attributes };\n    }\n\n    grantOptions = Util.merge(grantOptions, attributes);\n\n    return this.gateway.http\n      .post(`${this.config.baseMerchantPath()}/payment_methods/grant`, {\n        // eslint-disable-next-line camelcase\n        payment_method: grantOptions,\n      })\n      .then(this.responseHandler());\n  }\n\n  revoke(token) {\n    if (token.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null);\n    }\n\n    return this.gateway.http\n      .post(`${this.config.baseMerchantPath()}/payment_methods/revoke`, {\n        // eslint-disable-next-line camelcase\n        payment_method: {\n          sharedPaymentMethodToken: token,\n        },\n      })\n      .then(this.responseHandler());\n  }\n\n  delete(token, options) {\n    let queryParam, invalidKeysError;\n\n    if (typeof options === \"function\") {\n      options = null;\n    }\n    invalidKeysError = Util.verifyKeys(this._deleteSignature(), options);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n    queryParam =\n      options != null\n        ? \"?\" +\n          querystring.stringify(Util.convertObjectKeysToUnderscores(options))\n        : \"\";\n\n    return this.gateway.http.delete(\n      this.config.baseMerchantPath() +\n        \"/payment_methods/any/\" +\n        token +\n        queryParam\n    );\n  }\n\n  _deleteSignature() {\n    return {\n      valid: [\"revokeAllGrants\"],\n    };\n  }\n\n  _checkForDeprecatedAttributes(attributes) {\n    if (attributes.deviceSessionId != null) {\n      console.warn(\n        \"[DEPRECATED] `deviceSessionId` is a deprecated param for PaymentMethod objects. Use `deviceData` instead\"\n      );\n    }\n\n    if (attributes.fraudMerchantId != null) {\n      console.warn(\n        \"[DEPRECATED] `fraudMerchantId` is a deprecated param for PaymentMethod objects. Use `deviceData` instead\"\n      );\n    }\n  }\n}\n\nmodule.exports = { PaymentMethodGateway: wrapPrototype(PaymentMethodGateway) };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}