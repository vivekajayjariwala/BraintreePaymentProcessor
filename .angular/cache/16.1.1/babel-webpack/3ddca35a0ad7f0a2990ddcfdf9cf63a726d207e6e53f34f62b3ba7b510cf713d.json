{"ast":null,"code":"\"use strict\";\n\nlet crypto = require(\"crypto\");\nconst {\n  Util: {\n    zip\n  }\n} = require(\"../../lib/braintree/util\");\nclass Digest {\n  static Sha1hexdigest(privateKey, string) {\n    return new Digest().hmacSha1(privateKey, string);\n  }\n  static secureCompare(left, right) {\n    return new Digest().secureCompare(left, right);\n  }\n  hmacSha256(key, data) {\n    let hmac = crypto.createHmac(\"sha256\", this.sha256(key));\n    hmac.update(data, \"binary\");\n    return hmac.digest(\"hex\");\n  }\n  hmacSha1(key, data) {\n    let hmac = crypto.createHmac(\"sha1\", this.sha1(key));\n    hmac.update(data, \"binary\");\n    return hmac.digest(\"hex\");\n  }\n  secureCompare(left, right) {\n    if (left == null || right == null) {\n      return false;\n    }\n    let leftBytes = this.unpack(left);\n    let rightBytes = this.unpack(right);\n    let result = 0;\n    for (let [leftByte, rightByte] of zip(leftBytes, rightBytes)) {\n      result |= leftByte ^ rightByte;\n    }\n    return result === 0;\n  }\n  sha1(data) {\n    let hash = crypto.createHash(\"sha1\");\n    hash.update(data, \"binary\");\n    return hash.digest();\n  }\n  sha256(data) {\n    let hash = crypto.createHash(\"sha256\");\n    hash.update(data, \"binary\");\n    return hash.digest();\n  }\n  unpack(string) {\n    let bytes = [];\n    for (let index = 0; index < string.length; index++) {\n      bytes.push(string.charCodeAt(index));\n    }\n    return bytes;\n  }\n}\nmodule.exports = {\n  Digest: Digest\n};","map":{"version":3,"names":["crypto","require","Util","zip","Digest","Sha1hexdigest","privateKey","string","hmacSha1","secureCompare","left","right","hmacSha256","key","data","hmac","createHmac","sha256","update","digest","sha1","leftBytes","unpack","rightBytes","result","leftByte","rightByte","hash","createHash","bytes","index","length","push","charCodeAt","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/digest.js"],"sourcesContent":["\"use strict\";\n\nlet crypto = require(\"crypto\");\nconst {\n  Util: { zip },\n} = require(\"../../lib/braintree/util\");\n\nclass Digest {\n  static Sha1hexdigest(privateKey, string) {\n    return new Digest().hmacSha1(privateKey, string);\n  }\n\n  static secureCompare(left, right) {\n    return new Digest().secureCompare(left, right);\n  }\n\n  hmacSha256(key, data) {\n    let hmac = crypto.createHmac(\"sha256\", this.sha256(key));\n\n    hmac.update(data, \"binary\");\n\n    return hmac.digest(\"hex\");\n  }\n\n  hmacSha1(key, data) {\n    let hmac = crypto.createHmac(\"sha1\", this.sha1(key));\n\n    hmac.update(data, \"binary\");\n\n    return hmac.digest(\"hex\");\n  }\n\n  secureCompare(left, right) {\n    if (left == null || right == null) {\n      return false;\n    }\n\n    let leftBytes = this.unpack(left);\n    let rightBytes = this.unpack(right);\n\n    let result = 0;\n\n    for (let [leftByte, rightByte] of zip(leftBytes, rightBytes)) {\n      result |= leftByte ^ rightByte;\n    }\n\n    return result === 0;\n  }\n\n  sha1(data) {\n    let hash = crypto.createHash(\"sha1\");\n\n    hash.update(data, \"binary\");\n\n    return hash.digest();\n  }\n\n  sha256(data) {\n    let hash = crypto.createHash(\"sha256\");\n\n    hash.update(data, \"binary\");\n\n    return hash.digest();\n  }\n\n  unpack(string) {\n    let bytes = [];\n\n    for (let index = 0; index < string.length; index++) {\n      bytes.push(string.charCodeAt(index));\n    }\n\n    return bytes;\n  }\n}\n\nmodule.exports = { Digest: Digest };\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAM;EACJC,IAAI,EAAE;IAAEC;EAAI;AACd,CAAC,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAEvC,MAAMG,MAAM,CAAC;EACX,OAAOC,aAAaA,CAACC,UAAU,EAAEC,MAAM,EAAE;IACvC,OAAO,IAAIH,MAAM,CAAC,CAAC,CAACI,QAAQ,CAACF,UAAU,EAAEC,MAAM,CAAC;EAClD;EAEA,OAAOE,aAAaA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChC,OAAO,IAAIP,MAAM,CAAC,CAAC,CAACK,aAAa,CAACC,IAAI,EAAEC,KAAK,CAAC;EAChD;EAEAC,UAAUA,CAACC,GAAG,EAAEC,IAAI,EAAE;IACpB,IAAIC,IAAI,GAAGf,MAAM,CAACgB,UAAU,CAAC,QAAQ,EAAE,IAAI,CAACC,MAAM,CAACJ,GAAG,CAAC,CAAC;IAExDE,IAAI,CAACG,MAAM,CAACJ,IAAI,EAAE,QAAQ,CAAC;IAE3B,OAAOC,IAAI,CAACI,MAAM,CAAC,KAAK,CAAC;EAC3B;EAEAX,QAAQA,CAACK,GAAG,EAAEC,IAAI,EAAE;IAClB,IAAIC,IAAI,GAAGf,MAAM,CAACgB,UAAU,CAAC,MAAM,EAAE,IAAI,CAACI,IAAI,CAACP,GAAG,CAAC,CAAC;IAEpDE,IAAI,CAACG,MAAM,CAACJ,IAAI,EAAE,QAAQ,CAAC;IAE3B,OAAOC,IAAI,CAACI,MAAM,CAAC,KAAK,CAAC;EAC3B;EAEAV,aAAaA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACzB,IAAID,IAAI,IAAI,IAAI,IAAIC,KAAK,IAAI,IAAI,EAAE;MACjC,OAAO,KAAK;IACd;IAEA,IAAIU,SAAS,GAAG,IAAI,CAACC,MAAM,CAACZ,IAAI,CAAC;IACjC,IAAIa,UAAU,GAAG,IAAI,CAACD,MAAM,CAACX,KAAK,CAAC;IAEnC,IAAIa,MAAM,GAAG,CAAC;IAEd,KAAK,IAAI,CAACC,QAAQ,EAAEC,SAAS,CAAC,IAAIvB,GAAG,CAACkB,SAAS,EAAEE,UAAU,CAAC,EAAE;MAC5DC,MAAM,IAAIC,QAAQ,GAAGC,SAAS;IAChC;IAEA,OAAOF,MAAM,KAAK,CAAC;EACrB;EAEAJ,IAAIA,CAACN,IAAI,EAAE;IACT,IAAIa,IAAI,GAAG3B,MAAM,CAAC4B,UAAU,CAAC,MAAM,CAAC;IAEpCD,IAAI,CAACT,MAAM,CAACJ,IAAI,EAAE,QAAQ,CAAC;IAE3B,OAAOa,IAAI,CAACR,MAAM,CAAC,CAAC;EACtB;EAEAF,MAAMA,CAACH,IAAI,EAAE;IACX,IAAIa,IAAI,GAAG3B,MAAM,CAAC4B,UAAU,CAAC,QAAQ,CAAC;IAEtCD,IAAI,CAACT,MAAM,CAACJ,IAAI,EAAE,QAAQ,CAAC;IAE3B,OAAOa,IAAI,CAACR,MAAM,CAAC,CAAC;EACtB;EAEAG,MAAMA,CAACf,MAAM,EAAE;IACb,IAAIsB,KAAK,GAAG,EAAE;IAEd,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGvB,MAAM,CAACwB,MAAM,EAAED,KAAK,EAAE,EAAE;MAClDD,KAAK,CAACG,IAAI,CAACzB,MAAM,CAAC0B,UAAU,CAACH,KAAK,CAAC,CAAC;IACtC;IAEA,OAAOD,KAAK;EACd;AACF;AAEAK,MAAM,CAACC,OAAO,GAAG;EAAE/B,MAAM,EAAEA;AAAO,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}