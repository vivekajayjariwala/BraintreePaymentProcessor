{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Plan = require(\"./plan\").Plan;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nlet exceptions = require(\"./exceptions\");\nclass PlanGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  all() {\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/plans`).then(this.createResponseHandler(\"plan\", Plan)).then(response => {\n      if (!response.success) {\n        return response;\n      }\n\n      // NEXT_MAJOR_VERSION all the other server sdks return the collection directly, rather\n      // than a response object. For now, add the plans and success properties to the collection\n      // for backwards compatibility. We can drop these at the next major version.\n      const collection = response.plans;\n      collection.success = response.success;\n      collection.plans = response.plans;\n      return collection;\n    });\n  }\n  create(attributes) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/plans`, {\n      plan: attributes\n    }).then(this.responseHandler());\n  }\n  find(planId) {\n    if (planId.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/plans/${planId}`).then(response => {\n      return new Plan(response.plan, this.gateway);\n    });\n  }\n  update(planId, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/plans/${planId}`, {\n      plan: attributes\n    }).then(this.responseHandler());\n  }\n  responseHandler() {\n    return this.createResponseHandler(\"plan\", Plan);\n  }\n}\nmodule.exports = {\n  PlanGateway: wrapPrototype(PlanGateway)\n};","map":{"version":3,"names":["Gateway","require","Plan","wrapPrototype","exceptions","PlanGateway","constructor","gateway","config","all","http","get","baseMerchantPath","then","createResponseHandler","response","success","collection","plans","create","attributes","post","plan","responseHandler","find","planId","trim","Promise","reject","NotFoundError","update","put","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/plan_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Plan = require(\"./plan\").Plan;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nlet exceptions = require(\"./exceptions\");\n\nclass PlanGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  all() {\n    return this.gateway.http\n      .get(`${this.config.baseMerchantPath()}/plans`)\n      .then(this.createResponseHandler(\"plan\", Plan))\n      .then((response) => {\n        if (!response.success) {\n          return response;\n        }\n\n        // NEXT_MAJOR_VERSION all the other server sdks return the collection directly, rather\n        // than a response object. For now, add the plans and success properties to the collection\n        // for backwards compatibility. We can drop these at the next major version.\n        const collection = response.plans;\n\n        collection.success = response.success;\n        collection.plans = response.plans;\n\n        return collection;\n      });\n  }\n\n  create(attributes) {\n    return this.gateway.http\n      .post(`${this.config.baseMerchantPath()}/plans`, { plan: attributes })\n      .then(this.responseHandler());\n  }\n\n  find(planId) {\n    if (planId.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http\n      .get(`${this.config.baseMerchantPath()}/plans/${planId}`)\n      .then((response) => {\n        return new Plan(response.plan, this.gateway);\n      });\n  }\n\n  update(planId, attributes) {\n    return this.gateway.http\n      .put(`${this.config.baseMerchantPath()}/plans/${planId}`, {\n        plan: attributes,\n      })\n      .then(this.responseHandler());\n  }\n\n  responseHandler() {\n    return this.createResponseHandler(\"plan\", Plan);\n  }\n}\n\nmodule.exports = { PlanGateway: wrapPrototype(PlanGateway) };\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC,CAACD,OAAO;AAC1C,IAAIE,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAACC,IAAI;AACjC,IAAIC,aAAa,GAAGF,OAAO,CAAC,yBAAyB,CAAC,CAACE,aAAa;AACpE,IAAIC,UAAU,GAAGH,OAAO,CAAC,cAAc,CAAC;AAExC,MAAMI,WAAW,SAASL,OAAO,CAAC;EAChCM,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,OAAO,CAACC,MAAM;EACnC;EAEAC,GAAGA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACF,OAAO,CAACG,IAAI,CACrBC,GAAG,CAAE,GAAE,IAAI,CAACH,MAAM,CAACI,gBAAgB,CAAC,CAAE,QAAO,CAAC,CAC9CC,IAAI,CAAC,IAAI,CAACC,qBAAqB,CAAC,MAAM,EAAEZ,IAAI,CAAC,CAAC,CAC9CW,IAAI,CAAEE,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,OAAO,EAAE;QACrB,OAAOD,QAAQ;MACjB;;MAEA;MACA;MACA;MACA,MAAME,UAAU,GAAGF,QAAQ,CAACG,KAAK;MAEjCD,UAAU,CAACD,OAAO,GAAGD,QAAQ,CAACC,OAAO;MACrCC,UAAU,CAACC,KAAK,GAAGH,QAAQ,CAACG,KAAK;MAEjC,OAAOD,UAAU;IACnB,CAAC,CAAC;EACN;EAEAE,MAAMA,CAACC,UAAU,EAAE;IACjB,OAAO,IAAI,CAACb,OAAO,CAACG,IAAI,CACrBW,IAAI,CAAE,GAAE,IAAI,CAACb,MAAM,CAACI,gBAAgB,CAAC,CAAE,QAAO,EAAE;MAAEU,IAAI,EAAEF;IAAW,CAAC,CAAC,CACrEP,IAAI,CAAC,IAAI,CAACU,eAAe,CAAC,CAAC,CAAC;EACjC;EAEAC,IAAIA,CAACC,MAAM,EAAE;IACX,IAAIA,MAAM,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACxB,OAAOC,OAAO,CAACC,MAAM,CAACxB,UAAU,CAACyB,aAAa,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACtE;;IAEA,OAAO,IAAI,CAACtB,OAAO,CAACG,IAAI,CACrBC,GAAG,CAAE,GAAE,IAAI,CAACH,MAAM,CAACI,gBAAgB,CAAC,CAAE,UAASa,MAAO,EAAC,CAAC,CACxDZ,IAAI,CAAEE,QAAQ,IAAK;MAClB,OAAO,IAAIb,IAAI,CAACa,QAAQ,CAACO,IAAI,EAAE,IAAI,CAACf,OAAO,CAAC;IAC9C,CAAC,CAAC;EACN;EAEAuB,MAAMA,CAACL,MAAM,EAAEL,UAAU,EAAE;IACzB,OAAO,IAAI,CAACb,OAAO,CAACG,IAAI,CACrBqB,GAAG,CAAE,GAAE,IAAI,CAACvB,MAAM,CAACI,gBAAgB,CAAC,CAAE,UAASa,MAAO,EAAC,EAAE;MACxDH,IAAI,EAAEF;IACR,CAAC,CAAC,CACDP,IAAI,CAAC,IAAI,CAACU,eAAe,CAAC,CAAC,CAAC;EACjC;EAEAA,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACT,qBAAqB,CAAC,MAAM,EAAEZ,IAAI,CAAC;EACjD;AACF;AAEA8B,MAAM,CAACC,OAAO,GAAG;EAAE5B,WAAW,EAAEF,aAAa,CAACE,WAAW;AAAE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}