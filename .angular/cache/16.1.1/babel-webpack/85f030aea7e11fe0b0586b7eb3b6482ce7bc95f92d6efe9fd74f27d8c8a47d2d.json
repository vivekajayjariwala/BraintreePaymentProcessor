{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet PayPalAccount = require(\"./paypal_account\").PayPalAccount;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass PayPalAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  find(token) {\n    if (token.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`).then(response => {\n      return new PayPalAccount(response.paypalAccount);\n    });\n  }\n  update(token, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`, {\n      paypalAccount: attributes\n    }).then(this.responseHandler());\n  }\n  delete(token) {\n    let path = `${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`;\n    return this.gateway.http.delete(path);\n  }\n  responseHandler() {\n    return this.createResponseHandler(\"paypalAccount\", PayPalAccount);\n  }\n}\nmodule.exports = {\n  PayPalAccountGateway: wrapPrototype(PayPalAccountGateway)\n};","map":{"version":3,"names":["Gateway","require","PayPalAccount","exceptions","wrapPrototype","PayPalAccountGateway","constructor","gateway","config","find","token","trim","Promise","reject","NotFoundError","http","get","baseMerchantPath","then","response","paypalAccount","update","attributes","put","responseHandler","delete","path","createResponseHandler","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/paypal_account_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet PayPalAccount = require(\"./paypal_account\").PayPalAccount;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass PayPalAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(token) {\n    if (token.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http\n      .get(\n        `${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`\n      )\n      .then((response) => {\n        return new PayPalAccount(response.paypalAccount);\n      });\n  }\n\n  update(token, attributes) {\n    return this.gateway.http\n      .put(\n        `${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`,\n        { paypalAccount: attributes }\n      )\n      .then(this.responseHandler());\n  }\n\n  delete(token) {\n    let path = `${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`;\n\n    return this.gateway.http.delete(path);\n  }\n\n  responseHandler() {\n    return this.createResponseHandler(\"paypalAccount\", PayPalAccount);\n  }\n}\n\nmodule.exports = { PayPalAccountGateway: wrapPrototype(PayPalAccountGateway) };\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC,CAACD,OAAO;AAC1C,IAAIE,aAAa,GAAGD,OAAO,CAAC,kBAAkB,CAAC,CAACC,aAAa;AAC7D,IAAIC,UAAU,GAAGF,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIG,aAAa,GAAGH,OAAO,CAAC,yBAAyB,CAAC,CAACG,aAAa;AAEpE,MAAMC,oBAAoB,SAASL,OAAO,CAAC;EACzCM,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,OAAO,CAACC,MAAM;EACnC;EAEAC,IAAIA,CAACC,KAAK,EAAE;IACV,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACvB,OAAOC,OAAO,CAACC,MAAM,CAACV,UAAU,CAACW,aAAa,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACtE;;IAEA,OAAO,IAAI,CAACP,OAAO,CAACQ,IAAI,CACrBC,GAAG,CACD,GAAE,IAAI,CAACR,MAAM,CAACS,gBAAgB,CAAC,CAAE,mCAAkCP,KAAM,EAC5E,CAAC,CACAQ,IAAI,CAAEC,QAAQ,IAAK;MAClB,OAAO,IAAIjB,aAAa,CAACiB,QAAQ,CAACC,aAAa,CAAC;IAClD,CAAC,CAAC;EACN;EAEAC,MAAMA,CAACX,KAAK,EAAEY,UAAU,EAAE;IACxB,OAAO,IAAI,CAACf,OAAO,CAACQ,IAAI,CACrBQ,GAAG,CACD,GAAE,IAAI,CAACf,MAAM,CAACS,gBAAgB,CAAC,CAAE,mCAAkCP,KAAM,EAAC,EAC3E;MAAEU,aAAa,EAAEE;IAAW,CAC9B,CAAC,CACAJ,IAAI,CAAC,IAAI,CAACM,eAAe,CAAC,CAAC,CAAC;EACjC;EAEAC,MAAMA,CAACf,KAAK,EAAE;IACZ,IAAIgB,IAAI,GAAI,GAAE,IAAI,CAAClB,MAAM,CAACS,gBAAgB,CAAC,CAAE,mCAAkCP,KAAM,EAAC;IAEtF,OAAO,IAAI,CAACH,OAAO,CAACQ,IAAI,CAACU,MAAM,CAACC,IAAI,CAAC;EACvC;EAEAF,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACG,qBAAqB,CAAC,eAAe,EAAEzB,aAAa,CAAC;EACnE;AACF;AAEA0B,MAAM,CAACC,OAAO,GAAG;EAAExB,oBAAoB,EAAED,aAAa,CAACC,oBAAoB;AAAE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}