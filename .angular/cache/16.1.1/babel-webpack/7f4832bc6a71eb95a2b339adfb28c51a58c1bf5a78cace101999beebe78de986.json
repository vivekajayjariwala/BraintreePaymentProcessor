{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Util = require(\"./util\").Util;\nlet PaymentMethodNonce = require(\"./payment_method_nonce\").PaymentMethodNonce;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass PaymentMethodNonceGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  responseHandler() {\n    let handler = this.createResponseHandler(\"payment_method_nonce\", PaymentMethodNonce);\n    return function (payload) {\n      return handler(payload).then(response => {\n        response.paymentMethodNonce = new PaymentMethodNonce(response.paymentMethodNonce);\n        return response;\n      });\n    };\n  }\n  create(paymentMethodToken, params) {\n    let schema = {\n      valid: [\"paymentMethodNonce[merchantAccountId]\", \"paymentMethodNonce[authenticationInsight]\", \"paymentMethodNonce[authenticationInsightOptions][amount]\", \"paymentMethodNonce[authenticationInsightOptions][recurringCustomerConsent]\", \"paymentMethodNonce[authenticationInsightOptions][recurringMaxAmount]\"]\n    };\n    let invalidKeysError = Util.verifyKeys(schema, params);\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/${paymentMethodToken}/nonces`, params).then(this.responseHandler());\n  }\n  find(paymentMethodNonce) {\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_method_nonces/${paymentMethodNonce}`).then(response => {\n      return new PaymentMethodNonce(response.paymentMethodNonce);\n    });\n  }\n}\nmodule.exports = {\n  PaymentMethodNonceGateway: wrapPrototype(PaymentMethodNonceGateway)\n};","map":{"version":3,"names":["Gateway","require","Util","PaymentMethodNonce","wrapPrototype","PaymentMethodNonceGateway","constructor","gateway","config","responseHandler","handler","createResponseHandler","payload","then","response","paymentMethodNonce","create","paymentMethodToken","params","schema","valid","invalidKeysError","verifyKeys","Promise","reject","http","post","baseMerchantPath","find","get","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/payment_method_nonce_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Util = require(\"./util\").Util;\nlet PaymentMethodNonce = require(\"./payment_method_nonce\").PaymentMethodNonce;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass PaymentMethodNonceGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  responseHandler() {\n    let handler = this.createResponseHandler(\n      \"payment_method_nonce\",\n      PaymentMethodNonce\n    );\n\n    return function (payload) {\n      return handler(payload).then((response) => {\n        response.paymentMethodNonce = new PaymentMethodNonce(\n          response.paymentMethodNonce\n        );\n\n        return response;\n      });\n    };\n  }\n\n  create(paymentMethodToken, params) {\n    let schema = {\n      valid: [\n        \"paymentMethodNonce[merchantAccountId]\",\n        \"paymentMethodNonce[authenticationInsight]\",\n        \"paymentMethodNonce[authenticationInsightOptions][amount]\",\n        \"paymentMethodNonce[authenticationInsightOptions][recurringCustomerConsent]\",\n        \"paymentMethodNonce[authenticationInsightOptions][recurringMaxAmount]\",\n      ],\n    };\n\n    let invalidKeysError = Util.verifyKeys(schema, params);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n\n    return this.gateway.http\n      .post(\n        `${this.config.baseMerchantPath()}/payment_methods/${paymentMethodToken}/nonces`,\n        params\n      )\n      .then(this.responseHandler());\n  }\n\n  find(paymentMethodNonce) {\n    return this.gateway.http\n      .get(\n        `${this.config.baseMerchantPath()}/payment_method_nonces/${paymentMethodNonce}`\n      )\n      .then((response) => {\n        return new PaymentMethodNonce(response.paymentMethodNonce);\n      });\n  }\n}\n\nmodule.exports = {\n  PaymentMethodNonceGateway: wrapPrototype(PaymentMethodNonceGateway),\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC,CAACD,OAAO;AAC1C,IAAIE,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAACC,IAAI;AACjC,IAAIC,kBAAkB,GAAGF,OAAO,CAAC,wBAAwB,CAAC,CAACE,kBAAkB;AAC7E,IAAIC,aAAa,GAAGH,OAAO,CAAC,yBAAyB,CAAC,CAACG,aAAa;AAEpE,MAAMC,yBAAyB,SAASL,OAAO,CAAC;EAC9CM,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,OAAO,CAACC,MAAM;EACnC;EAEAC,eAAeA,CAAA,EAAG;IAChB,IAAIC,OAAO,GAAG,IAAI,CAACC,qBAAqB,CACtC,sBAAsB,EACtBR,kBACF,CAAC;IAED,OAAO,UAAUS,OAAO,EAAE;MACxB,OAAOF,OAAO,CAACE,OAAO,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;QACzCA,QAAQ,CAACC,kBAAkB,GAAG,IAAIZ,kBAAkB,CAClDW,QAAQ,CAACC,kBACX,CAAC;QAED,OAAOD,QAAQ;MACjB,CAAC,CAAC;IACJ,CAAC;EACH;EAEAE,MAAMA,CAACC,kBAAkB,EAAEC,MAAM,EAAE;IACjC,IAAIC,MAAM,GAAG;MACXC,KAAK,EAAE,CACL,uCAAuC,EACvC,2CAA2C,EAC3C,0DAA0D,EAC1D,4EAA4E,EAC5E,sEAAsE;IAE1E,CAAC;IAED,IAAIC,gBAAgB,GAAGnB,IAAI,CAACoB,UAAU,CAACH,MAAM,EAAED,MAAM,CAAC;IAEtD,IAAIG,gBAAgB,EAAE;MACpB,OAAOE,OAAO,CAACC,MAAM,CAACH,gBAAgB,CAAC;IACzC;IAEA,OAAO,IAAI,CAACd,OAAO,CAACkB,IAAI,CACrBC,IAAI,CACF,GAAE,IAAI,CAAClB,MAAM,CAACmB,gBAAgB,CAAC,CAAE,oBAAmBV,kBAAmB,SAAQ,EAChFC,MACF,CAAC,CACAL,IAAI,CAAC,IAAI,CAACJ,eAAe,CAAC,CAAC,CAAC;EACjC;EAEAmB,IAAIA,CAACb,kBAAkB,EAAE;IACvB,OAAO,IAAI,CAACR,OAAO,CAACkB,IAAI,CACrBI,GAAG,CACD,GAAE,IAAI,CAACrB,MAAM,CAACmB,gBAAgB,CAAC,CAAE,0BAAyBZ,kBAAmB,EAChF,CAAC,CACAF,IAAI,CAAEC,QAAQ,IAAK;MAClB,OAAO,IAAIX,kBAAkB,CAACW,QAAQ,CAACC,kBAAkB,CAAC;IAC5D,CAAC,CAAC;EACN;AACF;AAEAe,MAAM,CAACC,OAAO,GAAG;EACf1B,yBAAyB,EAAED,aAAa,CAACC,yBAAyB;AACpE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}