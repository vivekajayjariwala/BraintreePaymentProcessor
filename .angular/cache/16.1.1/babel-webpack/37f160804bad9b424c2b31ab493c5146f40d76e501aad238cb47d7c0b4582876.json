{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet ErrorResponse = require(\"./error_response\").ErrorResponse;\nlet Util = require(\"./util\").Util;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nlet DEFAULT_VERSION = 2;\nclass ClientTokenGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  generate(params) {\n    let err;\n    params = params || {};\n    if (!params.version) {\n      params.version = DEFAULT_VERSION;\n    }\n    err = Util.verifyKeys(this._generateSignature(), params);\n    if (!err) {\n      err = this.validateParams(params);\n    }\n    if (err) {\n      return Promise.reject(err);\n    }\n    params = {\n      client_token: params\n    }; // eslint-disable-line camelcase\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/client_token`, params).then(this.responseHandler());\n  }\n  validateParams(params) {\n    if (params.customerId || !params.options) {\n      return;\n    }\n    let options = [\"makeDefault\", \"verifyCard\", \"failOnDuplicatePaymentMethod\"];\n    let invalidOptions = options.filter(name => params.options[name]).map(name => name);\n    if (invalidOptions.length > 0) {\n      // eslint-disable-next-line consistent-return, new-cap\n      return exceptions.UnexpectedError(`A customer id is required for the following options: ${invalidOptions.join(\", \")}`);\n    }\n    return null; // eslint-disable-line consistent-return\n  }\n\n  responseHandler() {\n    let gateway = this.gateway;\n\n    // eslint-disable-next-line consistent-return\n    return function (response) {\n      if (response.clientToken) {\n        response.success = true;\n        response.clientToken = response.clientToken.value;\n        return response;\n      } else if (response.apiErrorResponse) {\n        return new ErrorResponse(response.apiErrorResponse, gateway);\n      }\n    };\n  }\n  _generateSignature() {\n    return {\n      valid: [\"addressId\", \"customerId\", \"proxyMerchantId\", \"merchantAccountId\", \"version\", \"options\", \"options[makeDefault]\", \"options[verifyCard]\", \"options[failOnDuplicatePaymentMethod]\"]\n    };\n  }\n}\nmodule.exports = {\n  ClientTokenGateway: wrapPrototype(ClientTokenGateway)\n};","map":{"version":3,"names":["Gateway","require","ErrorResponse","Util","exceptions","wrapPrototype","DEFAULT_VERSION","ClientTokenGateway","constructor","gateway","config","generate","params","err","version","verifyKeys","_generateSignature","validateParams","Promise","reject","client_token","http","post","baseMerchantPath","then","responseHandler","customerId","options","invalidOptions","filter","name","map","length","UnexpectedError","join","response","clientToken","success","value","apiErrorResponse","valid","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/client_token_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet ErrorResponse = require(\"./error_response\").ErrorResponse;\nlet Util = require(\"./util\").Util;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nlet DEFAULT_VERSION = 2;\n\nclass ClientTokenGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  generate(params) {\n    let err;\n\n    params = params || {};\n\n    if (!params.version) {\n      params.version = DEFAULT_VERSION;\n    }\n\n    err = Util.verifyKeys(this._generateSignature(), params);\n\n    if (!err) {\n      err = this.validateParams(params);\n    }\n\n    if (err) {\n      return Promise.reject(err);\n    }\n    params = { client_token: params }; // eslint-disable-line camelcase\n\n    return this.gateway.http\n      .post(`${this.config.baseMerchantPath()}/client_token`, params)\n      .then(this.responseHandler());\n  }\n\n  validateParams(params) {\n    if (params.customerId || !params.options) {\n      return;\n    }\n\n    let options = [\"makeDefault\", \"verifyCard\", \"failOnDuplicatePaymentMethod\"];\n    let invalidOptions = options\n      .filter((name) => params.options[name])\n      .map((name) => name);\n\n    if (invalidOptions.length > 0) {\n      // eslint-disable-next-line consistent-return, new-cap\n      return exceptions.UnexpectedError(\n        `A customer id is required for the following options: ${invalidOptions.join(\n          \", \"\n        )}`\n      );\n    }\n\n    return null; // eslint-disable-line consistent-return\n  }\n\n  responseHandler() {\n    let gateway = this.gateway;\n\n    // eslint-disable-next-line consistent-return\n    return function (response) {\n      if (response.clientToken) {\n        response.success = true;\n        response.clientToken = response.clientToken.value;\n\n        return response;\n      } else if (response.apiErrorResponse) {\n        return new ErrorResponse(response.apiErrorResponse, gateway);\n      }\n    };\n  }\n\n  _generateSignature() {\n    return {\n      valid: [\n        \"addressId\",\n        \"customerId\",\n        \"proxyMerchantId\",\n        \"merchantAccountId\",\n        \"version\",\n        \"options\",\n        \"options[makeDefault]\",\n        \"options[verifyCard]\",\n        \"options[failOnDuplicatePaymentMethod]\",\n      ],\n    };\n  }\n}\n\nmodule.exports = { ClientTokenGateway: wrapPrototype(ClientTokenGateway) };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}