{"ast":null,"code":"\"use strict\";\n\nconst exceptions = require(\"./exceptions\");\nclass Util {\n  static convertObjectKeysToUnderscores(obj) {\n    let newObj = {};\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj[key];\n      let newKey = Util.toUnderscore(key);\n      if (value instanceof Array) {\n        newObj[newKey] = value.map(item => typeof item === \"object\" ? Util.convertObjectKeysToUnderscores(item) : item);\n      } else if (typeof value === \"object\") {\n        if (value instanceof Date || value === null) {\n          newObj[newKey] = value;\n        } else {\n          newObj[newKey] = Util.convertObjectKeysToUnderscores(value);\n        }\n      } else {\n        newObj[newKey] = value;\n      }\n    }\n    return newObj;\n  }\n  static convertObjectKeysToCamelCase(obj) {\n    let newObj = {};\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj[key];\n      let newKey = Util.toCamelCase(key);\n      if (value instanceof Array) {\n        newObj[newKey] = value.map(item => typeof item === \"object\" ? Util.convertObjectKeysToCamelCase(item) : item);\n      } else if (typeof value === \"object\") {\n        if (value instanceof Date || value === null) {\n          newObj[newKey] = value;\n        } else {\n          newObj[newKey] = Util.convertObjectKeysToCamelCase(value);\n        }\n      } else {\n        newObj[newKey] = value;\n      }\n    }\n    return newObj;\n  }\n\n  // eslint-disable-next-line complexity\n  static convertNodeToObject(obj) {\n    if (typeof obj === \"object\" && obj[\"@\"]) {\n      if (obj[\"@\"].type === \"array\") {\n        let newArray = [];\n        Object.keys(obj).forEach(key => {\n          let value = obj[key];\n          if (key !== \"@\") {\n            if (value instanceof Array) {\n              for (let item of value) {\n                newArray.push(this.convertNodeToObject(item));\n              }\n            } else {\n              newArray.push(this.convertNodeToObject(value));\n            }\n          }\n        });\n        return newArray;\n      } else if (obj[\"@\"].type === \"collection\") {\n        let newObj = {};\n        Object.keys(obj).forEach(key => {\n          let value = obj[key];\n          if (key !== \"@\") {\n            newObj[this.toCamelCase(key)] = this.convertNodeToObject(value);\n          }\n        });\n        return newObj;\n      } else if (obj[\"@\"].nil === \"true\") {\n        return null;\n      } else if (obj[\"@\"].type === \"integer\") {\n        return parseInt(obj[\"#\"], 10);\n      } else if (obj[\"@\"].type === \"boolean\") {\n        return obj[\"#\"] === \"true\";\n      }\n      return obj[\"#\"];\n    } else if (obj instanceof Array) {\n      return obj.map(item => this.convertNodeToObject(item));\n    } else if (typeof obj === \"object\" && this.objectIsEmpty(obj)) {\n      return \"\";\n    } else if (typeof obj === \"object\") {\n      let newObj = {};\n      Object.keys(obj).forEach(key => {\n        let value = obj[key];\n        newObj[this.toCamelCase(key)] = this.convertNodeToObject(value);\n      });\n      return newObj;\n    }\n    return obj;\n  }\n  static objectIsEmpty(obj) {\n    if (Object.keys(obj).length !== 0) {\n      return false;\n    }\n    return true;\n  }\n  static arrayIsEmpty(array) {\n    if (!(array instanceof Array)) {\n      return false;\n    }\n    if (array.length > 0) {\n      return false;\n    }\n    return true;\n  }\n  static toCamelCase(string) {\n    return string.replace(/([\\-\\_][a-z0-9])/g, match => match.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\"));\n  }\n  static toUnderscore(string) {\n    return string.replace(/([A-Z]+)([A-Z][a-z])/g, \"$1_$2\").replace(/([a-z])([A-Z])/g, \"$1_$2\").toLowerCase();\n  }\n  static flatten(array) {\n    while (this._containsArray(array)) {\n      array = array.reduce((first, rest) => {\n        first = first instanceof Array ? first : [first];\n        rest = rest instanceof Array ? this.flatten(rest) : rest;\n        return first.concat(rest);\n      });\n    }\n    return array;\n  }\n  static merge(obj1, obj2) {\n    for (let key in obj2) {\n      if (!obj2.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj2[key];\n      obj1[key] = value;\n    }\n    return obj1;\n  }\n  static without(array1, array2) {\n    let newArray = [];\n    for (let value of array1) {\n      if (!this._containsValue(array2, value)) {\n        newArray.push(value);\n      }\n    }\n    return newArray;\n  }\n  static withoutIgnoreCaseStyle(array1, array2) {\n    let newArray = [];\n    let array2CamelCased = array2.map(x => this.toCamelCase(x));\n    this.convertObjectKeysToCamelCase(array2);\n    for (let value of array1) {\n      if (!this._containsValue(array2CamelCased, value) && !this._containsValue(array2CamelCased, this.toCamelCase(value))) {\n        newArray.push(value);\n      }\n    }\n    return newArray;\n  }\n  static flattenKeys(obj, prefix) {\n    let keys = [];\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj[key];\n      if (typeof value === \"object\") {\n        let keyToPush = null;\n        if (this.isNumeric(key)) {\n          keyToPush = prefix ? prefix : key;\n        } else {\n          keyToPush = prefix ? prefix + \"[\" + key + \"]\" : key;\n        }\n        keys.push(Util.flattenKeys(value, keyToPush));\n      } else if (prefix) {\n        keys.push(prefix + \"[\" + key + \"]\");\n      } else {\n        keys.push(key);\n      }\n    }\n    return this.flatten(keys);\n  }\n  static isNumeric(value) {\n    return !isNaN(value);\n  }\n\n  // eslint-disable-next-line consistent-return\n  static verifyKeys(keys, obj) {\n    let invalidKeys;\n    let unrecognizedKeys = this.withoutIgnoreCaseStyle(this.flattenKeys(obj), keys.valid);\n    if (keys.ignore) {\n      invalidKeys = unrecognizedKeys.filter(function (key) {\n        for (let ignoredKey of keys.ignore) {\n          if (key.indexOf(ignoredKey) === 0 || Util.toCamelCase(key).indexOf(ignoredKey) === 0) {\n            return false;\n          }\n        }\n        return true;\n      });\n    } else {\n      invalidKeys = unrecognizedKeys;\n    }\n    if (invalidKeys.length > 0) {\n      // eslint-disable-next-line new-cap\n      return exceptions.InvalidKeysError(`These keys are invalid: ${invalidKeys.join(\", \")}`);\n    }\n  }\n  static _containsValue(array, element) {\n    return array.indexOf(element) !== -1;\n  }\n  static _containsArray(array) {\n    for (let element of array) {\n      if (element instanceof Array) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static zip(...arrays) {\n    const longestLength = arrays.reduce((prev, current) => prev > current.length ? prev : current.length, 0);\n    const finalArray = [];\n    let currentIndex = 0;\n    while (currentIndex < longestLength) {\n      const nextArray = [];\n      const i = currentIndex;\n      arrays.forEach(array => {\n        nextArray.push(array[i]);\n      });\n      finalArray.push(nextArray);\n      currentIndex++;\n    }\n    return finalArray;\n  }\n}\nmodule.exports = {\n  Util\n};","map":{"version":3,"names":["exceptions","require","Util","convertObjectKeysToUnderscores","obj","newObj","key","hasOwnProperty","value","newKey","toUnderscore","Array","map","item","Date","convertObjectKeysToCamelCase","toCamelCase","convertNodeToObject","type","newArray","Object","keys","forEach","push","nil","parseInt","objectIsEmpty","length","arrayIsEmpty","array","string","replace","match","toUpperCase","toLowerCase","flatten","_containsArray","reduce","first","rest","concat","merge","obj1","obj2","without","array1","array2","_containsValue","withoutIgnoreCaseStyle","array2CamelCased","x","flattenKeys","prefix","keyToPush","isNumeric","isNaN","verifyKeys","invalidKeys","unrecognizedKeys","valid","ignore","filter","ignoredKey","indexOf","InvalidKeysError","join","element","zip","arrays","longestLength","prev","current","finalArray","currentIndex","nextArray","i","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/util.js"],"sourcesContent":["\"use strict\";\n\nconst exceptions = require(\"./exceptions\");\n\nclass Util {\n  static convertObjectKeysToUnderscores(obj) {\n    let newObj = {};\n\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj[key];\n      let newKey = Util.toUnderscore(key);\n\n      if (value instanceof Array) {\n        newObj[newKey] = value.map((item) =>\n          typeof item === \"object\"\n            ? Util.convertObjectKeysToUnderscores(item)\n            : item\n        );\n      } else if (typeof value === \"object\") {\n        if (value instanceof Date || value === null) {\n          newObj[newKey] = value;\n        } else {\n          newObj[newKey] = Util.convertObjectKeysToUnderscores(value);\n        }\n      } else {\n        newObj[newKey] = value;\n      }\n    }\n\n    return newObj;\n  }\n\n  static convertObjectKeysToCamelCase(obj) {\n    let newObj = {};\n\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj[key];\n      let newKey = Util.toCamelCase(key);\n\n      if (value instanceof Array) {\n        newObj[newKey] = value.map((item) =>\n          typeof item === \"object\"\n            ? Util.convertObjectKeysToCamelCase(item)\n            : item\n        );\n      } else if (typeof value === \"object\") {\n        if (value instanceof Date || value === null) {\n          newObj[newKey] = value;\n        } else {\n          newObj[newKey] = Util.convertObjectKeysToCamelCase(value);\n        }\n      } else {\n        newObj[newKey] = value;\n      }\n    }\n\n    return newObj;\n  }\n\n  // eslint-disable-next-line complexity\n  static convertNodeToObject(obj) {\n    if (typeof obj === \"object\" && obj[\"@\"]) {\n      if (obj[\"@\"].type === \"array\") {\n        let newArray = [];\n\n        Object.keys(obj).forEach((key) => {\n          let value = obj[key];\n\n          if (key !== \"@\") {\n            if (value instanceof Array) {\n              for (let item of value) {\n                newArray.push(this.convertNodeToObject(item));\n              }\n            } else {\n              newArray.push(this.convertNodeToObject(value));\n            }\n          }\n        });\n\n        return newArray;\n      } else if (obj[\"@\"].type === \"collection\") {\n        let newObj = {};\n\n        Object.keys(obj).forEach((key) => {\n          let value = obj[key];\n\n          if (key !== \"@\") {\n            newObj[this.toCamelCase(key)] = this.convertNodeToObject(value);\n          }\n        });\n\n        return newObj;\n      } else if (obj[\"@\"].nil === \"true\") {\n        return null;\n      } else if (obj[\"@\"].type === \"integer\") {\n        return parseInt(obj[\"#\"], 10);\n      } else if (obj[\"@\"].type === \"boolean\") {\n        return obj[\"#\"] === \"true\";\n      }\n\n      return obj[\"#\"];\n    } else if (obj instanceof Array) {\n      return obj.map((item) => this.convertNodeToObject(item));\n    } else if (typeof obj === \"object\" && this.objectIsEmpty(obj)) {\n      return \"\";\n    } else if (typeof obj === \"object\") {\n      let newObj = {};\n\n      Object.keys(obj).forEach((key) => {\n        let value = obj[key];\n\n        newObj[this.toCamelCase(key)] = this.convertNodeToObject(value);\n      });\n\n      return newObj;\n    }\n\n    return obj;\n  }\n\n  static objectIsEmpty(obj) {\n    if (Object.keys(obj).length !== 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  static arrayIsEmpty(array) {\n    if (!(array instanceof Array)) {\n      return false;\n    }\n    if (array.length > 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  static toCamelCase(string) {\n    return string.replace(/([\\-\\_][a-z0-9])/g, (match) =>\n      match.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\")\n    );\n  }\n\n  static toUnderscore(string) {\n    return string\n      .replace(/([A-Z]+)([A-Z][a-z])/g, \"$1_$2\")\n      .replace(/([a-z])([A-Z])/g, \"$1_$2\")\n      .toLowerCase();\n  }\n\n  static flatten(array) {\n    while (this._containsArray(array)) {\n      array = array.reduce((first, rest) => {\n        first = first instanceof Array ? first : [first];\n        rest = rest instanceof Array ? this.flatten(rest) : rest;\n\n        return first.concat(rest);\n      });\n    }\n\n    return array;\n  }\n\n  static merge(obj1, obj2) {\n    for (let key in obj2) {\n      if (!obj2.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj2[key];\n\n      obj1[key] = value;\n    }\n\n    return obj1;\n  }\n\n  static without(array1, array2) {\n    let newArray = [];\n\n    for (let value of array1) {\n      if (!this._containsValue(array2, value)) {\n        newArray.push(value);\n      }\n    }\n\n    return newArray;\n  }\n\n  static withoutIgnoreCaseStyle(array1, array2) {\n    let newArray = [];\n    let array2CamelCased = array2.map((x) => this.toCamelCase(x));\n\n    this.convertObjectKeysToCamelCase(array2);\n\n    for (let value of array1) {\n      if (\n        !this._containsValue(array2CamelCased, value) &&\n        !this._containsValue(array2CamelCased, this.toCamelCase(value))\n      ) {\n        newArray.push(value);\n      }\n    }\n\n    return newArray;\n  }\n\n  static flattenKeys(obj, prefix) {\n    let keys = [];\n\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n\n      let value = obj[key];\n\n      if (typeof value === \"object\") {\n        let keyToPush = null;\n\n        if (this.isNumeric(key)) {\n          keyToPush = prefix ? prefix : key;\n        } else {\n          keyToPush = prefix ? prefix + \"[\" + key + \"]\" : key;\n        }\n\n        keys.push(Util.flattenKeys(value, keyToPush));\n      } else if (prefix) {\n        keys.push(prefix + \"[\" + key + \"]\");\n      } else {\n        keys.push(key);\n      }\n    }\n\n    return this.flatten(keys);\n  }\n\n  static isNumeric(value) {\n    return !isNaN(value);\n  }\n\n  // eslint-disable-next-line consistent-return\n  static verifyKeys(keys, obj) {\n    let invalidKeys;\n    let unrecognizedKeys = this.withoutIgnoreCaseStyle(\n      this.flattenKeys(obj),\n      keys.valid\n    );\n\n    if (keys.ignore) {\n      invalidKeys = unrecognizedKeys.filter(function (key) {\n        for (let ignoredKey of keys.ignore) {\n          if (\n            key.indexOf(ignoredKey) === 0 ||\n            Util.toCamelCase(key).indexOf(ignoredKey) === 0\n          ) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    } else {\n      invalidKeys = unrecognizedKeys;\n    }\n\n    if (invalidKeys.length > 0) {\n      // eslint-disable-next-line new-cap\n      return exceptions.InvalidKeysError(\n        `These keys are invalid: ${invalidKeys.join(\", \")}`\n      );\n    }\n  }\n\n  static _containsValue(array, element) {\n    return array.indexOf(element) !== -1;\n  }\n\n  static _containsArray(array) {\n    for (let element of array) {\n      if (element instanceof Array) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static zip(...arrays) {\n    const longestLength = arrays.reduce(\n      (prev, current) => (prev > current.length ? prev : current.length),\n      0\n    );\n    const finalArray = [];\n    let currentIndex = 0;\n\n    while (currentIndex < longestLength) {\n      const nextArray = [];\n      const i = currentIndex;\n\n      arrays.forEach((array) => {\n        nextArray.push(array[i]);\n      });\n\n      finalArray.push(nextArray);\n\n      currentIndex++;\n    }\n\n    return finalArray;\n  }\n}\n\nmodule.exports = { Util };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}