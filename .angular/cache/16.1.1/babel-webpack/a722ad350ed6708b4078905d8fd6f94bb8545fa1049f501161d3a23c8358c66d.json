{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet MerchantAccount = require(\"./merchant_account\").MerchantAccount;\nlet PaginatedResponse = require(\"./paginated_response\").PaginatedResponse;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass MerchantAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  create(attributes) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/merchant_accounts/create_via_api`, {\n      merchantAccount: attributes\n    }).then(this.responseHandler());\n  }\n  update(id, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/merchant_accounts/${id}/update_via_api`, {\n      merchantAccount: attributes\n    }).then(this.responseHandler());\n  }\n  find(id) {\n    if (id.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/merchant_accounts/${id}`).then(function (response) {\n      return new MerchantAccount(response.merchantAccount);\n    });\n  }\n  responseHandler() {\n    return this.createResponseHandler(\"merchantAccount\", MerchantAccount);\n  }\n  all(callback) {\n    let response = new PaginatedResponse(this.fetchMerchantAccounts.bind(this));\n    if (callback != null) {\n      return response.all(callback);\n    }\n    response.ready();\n    return response.stream;\n  }\n  fetchMerchantAccounts(pageNumber, callback) {\n    return this.gateway.http.get(this.config.baseMerchantPath() + \"/merchant_accounts?page=\" + pageNumber, (err, response) => {\n      let body, merchantAccounts, pageSize, ref, totalItems;\n      if (err) {\n        return callback(err);\n      }\n      body = response.merchantAccounts;\n      ref = response.merchantAccounts;\n      totalItems = ref.totalItems;\n      pageSize = ref.pageSize;\n      merchantAccounts = body.merchantAccount;\n      if (!Array.isArray(merchantAccounts)) {\n        merchantAccounts = [merchantAccounts];\n      }\n      return callback(null, totalItems, pageSize, merchantAccounts);\n    });\n  }\n  createForCurrency(attributes) {\n    return this.gateway.http.post(this.config.baseMerchantPath() + \"/merchant_accounts/create_for_currency\", {\n      merchantAccount: attributes\n    }).then(this.createForCurrencyResponseHandler());\n  }\n  createForCurrencyResponseHandler() {\n    let handler = this.createResponseHandler(null, null);\n    return function (payload) {\n      return handler(payload).then(response => {\n        if (response.success) {\n          response.merchantAccount = new MerchantAccount(response.response.merchantAccount);\n          delete response.response;\n        }\n        return response;\n      });\n    };\n  }\n}\nmodule.exports = {\n  MerchantAccountGateway: wrapPrototype(MerchantAccountGateway, {\n    ignoreMethods: [\"all\", \"fetchMerchantAccounts\"]\n  })\n};","map":{"version":3,"names":["Gateway","require","MerchantAccount","PaginatedResponse","exceptions","wrapPrototype","MerchantAccountGateway","constructor","gateway","config","create","attributes","http","post","baseMerchantPath","merchantAccount","then","responseHandler","update","id","put","find","trim","Promise","reject","NotFoundError","get","response","createResponseHandler","all","callback","fetchMerchantAccounts","bind","ready","stream","pageNumber","err","body","merchantAccounts","pageSize","ref","totalItems","Array","isArray","createForCurrency","createForCurrencyResponseHandler","handler","payload","success","module","exports","ignoreMethods"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/merchant_account_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet MerchantAccount = require(\"./merchant_account\").MerchantAccount;\nlet PaginatedResponse = require(\"./paginated_response\").PaginatedResponse;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass MerchantAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    return this.gateway.http\n      .post(\n        `${this.config.baseMerchantPath()}/merchant_accounts/create_via_api`,\n        { merchantAccount: attributes }\n      )\n      .then(this.responseHandler());\n  }\n\n  update(id, attributes) {\n    return this.gateway.http\n      .put(\n        `${this.config.baseMerchantPath()}/merchant_accounts/${id}/update_via_api`,\n        { merchantAccount: attributes }\n      )\n      .then(this.responseHandler());\n  }\n\n  find(id) {\n    if (id.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\"), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http\n      .get(`${this.config.baseMerchantPath()}/merchant_accounts/${id}`)\n      .then(function (response) {\n        return new MerchantAccount(response.merchantAccount);\n      });\n  }\n\n  responseHandler() {\n    return this.createResponseHandler(\"merchantAccount\", MerchantAccount);\n  }\n\n  all(callback) {\n    let response = new PaginatedResponse(this.fetchMerchantAccounts.bind(this));\n\n    if (callback != null) {\n      return response.all(callback);\n    }\n\n    response.ready();\n\n    return response.stream;\n  }\n\n  fetchMerchantAccounts(pageNumber, callback) {\n    return this.gateway.http.get(\n      this.config.baseMerchantPath() + \"/merchant_accounts?page=\" + pageNumber,\n      (err, response) => {\n        let body, merchantAccounts, pageSize, ref, totalItems;\n\n        if (err) {\n          return callback(err);\n        }\n\n        body = response.merchantAccounts;\n        ref = response.merchantAccounts;\n        totalItems = ref.totalItems;\n        pageSize = ref.pageSize;\n        merchantAccounts = body.merchantAccount;\n        if (!Array.isArray(merchantAccounts)) {\n          merchantAccounts = [merchantAccounts];\n        }\n\n        return callback(null, totalItems, pageSize, merchantAccounts);\n      }\n    );\n  }\n\n  createForCurrency(attributes) {\n    return this.gateway.http\n      .post(\n        this.config.baseMerchantPath() +\n          \"/merchant_accounts/create_for_currency\",\n        {\n          merchantAccount: attributes,\n        }\n      )\n      .then(this.createForCurrencyResponseHandler());\n  }\n\n  createForCurrencyResponseHandler() {\n    let handler = this.createResponseHandler(null, null);\n\n    return function (payload) {\n      return handler(payload).then((response) => {\n        if (response.success) {\n          response.merchantAccount = new MerchantAccount(\n            response.response.merchantAccount\n          );\n          delete response.response;\n        }\n\n        return response;\n      });\n    };\n  }\n}\n\nmodule.exports = {\n  MerchantAccountGateway: wrapPrototype(MerchantAccountGateway, {\n    ignoreMethods: [\"all\", \"fetchMerchantAccounts\"],\n  }),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}