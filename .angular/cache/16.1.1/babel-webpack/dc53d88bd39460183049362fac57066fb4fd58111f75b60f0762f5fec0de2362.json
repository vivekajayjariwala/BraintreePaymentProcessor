{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet UsBankAccountVerification = require(\"./us_bank_account_verification\").UsBankAccountVerification;\nlet UsBankAccountVerificationSearch = require(\"./us_bank_account_verification_search\").UsBankAccountVerificationSearch;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass UsBankAccountVerificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  find(usBankAccountVerificationId) {\n    if (usBankAccountVerificationId.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\")); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/us_bank_account_verifications/${usBankAccountVerificationId}`).then(function (response) {\n      return new UsBankAccountVerification(response.usBankAccountVerification);\n    });\n  }\n  search(fn, callback) {\n    let search = new UsBankAccountVerificationSearch();\n    fn(search);\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/us_bank_account_verifications/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n  confirmMicroTransferAmounts(usBankAccountVerificationId, depositAmounts, callback) {\n    let params = {\n      usBankAccountVerification: {\n        depositAmounts: depositAmounts\n      }\n    };\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/us_bank_account_verifications/${usBankAccountVerificationId}/confirm_micro_transfer_amounts`, params, callback).then(this.responseHandler());\n  }\n  responseHandler() {\n    return this.createResponseHandler(\"usBankAccountVerification\", UsBankAccountVerification);\n  }\n  pagingFunctionGenerator(search) {\n    return (ids, callback) => {\n      let searchCriteria = search.toHash();\n      searchCriteria.ids = ids;\n      return this.gateway.http.post(`${this.config.baseMerchantPath()}/us_bank_account_verifications/advanced_search`, {\n        search: searchCriteria\n      }, function (err, response) {\n        if (err) {\n          return callback(err, null);\n        } else if (Array.isArray(response.usBankAccountVerifications.usBankAccountVerification)) {\n          return response.usBankAccountVerifications.usBankAccountVerification.map(usBankAccountVerification => callback(null, new UsBankAccountVerification(usBankAccountVerification)));\n        }\n        return callback(null, new UsBankAccountVerification(response.usBankAccountVerifications.usBankAccountVerification));\n      });\n    };\n  }\n}\nmodule.exports = {\n  UsBankAccountVerificationGateway: wrapPrototype(UsBankAccountVerificationGateway, {\n    ignoreMethods: [\"search\"]\n  })\n};","map":{"version":3,"names":["Gateway","require","UsBankAccountVerification","UsBankAccountVerificationSearch","exceptions","wrapPrototype","UsBankAccountVerificationGateway","constructor","gateway","config","find","usBankAccountVerificationId","trim","Promise","reject","NotFoundError","http","get","baseMerchantPath","then","response","usBankAccountVerification","search","fn","callback","createSearchResponse","pagingFunctionGenerator","confirmMicroTransferAmounts","depositAmounts","params","put","responseHandler","createResponseHandler","ids","searchCriteria","toHash","post","err","Array","isArray","usBankAccountVerifications","map","module","exports","ignoreMethods"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/us_bank_account_verification_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet UsBankAccountVerification =\n  require(\"./us_bank_account_verification\").UsBankAccountVerification;\nlet UsBankAccountVerificationSearch =\n  require(\"./us_bank_account_verification_search\").UsBankAccountVerificationSearch;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass UsBankAccountVerificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(usBankAccountVerificationId) {\n    if (usBankAccountVerificationId.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\")); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http\n      .get(\n        `${this.config.baseMerchantPath()}/us_bank_account_verifications/${usBankAccountVerificationId}`\n      )\n      .then(function (response) {\n        return new UsBankAccountVerification(\n          response.usBankAccountVerification\n        );\n      });\n  }\n\n  search(fn, callback) {\n    let search = new UsBankAccountVerificationSearch();\n\n    fn(search);\n\n    return this.createSearchResponse(\n      `${this.config.baseMerchantPath()}/us_bank_account_verifications/advanced_search_ids`,\n      search,\n      this.pagingFunctionGenerator(search),\n      callback\n    );\n  }\n\n  confirmMicroTransferAmounts(\n    usBankAccountVerificationId,\n    depositAmounts,\n    callback\n  ) {\n    let params = {\n      usBankAccountVerification: {\n        depositAmounts: depositAmounts,\n      },\n    };\n\n    return this.gateway.http\n      .put(\n        `${this.config.baseMerchantPath()}/us_bank_account_verifications/${usBankAccountVerificationId}/confirm_micro_transfer_amounts`,\n        params,\n        callback\n      )\n      .then(this.responseHandler());\n  }\n\n  responseHandler() {\n    return this.createResponseHandler(\n      \"usBankAccountVerification\",\n      UsBankAccountVerification\n    );\n  }\n\n  pagingFunctionGenerator(search) {\n    return (ids, callback) => {\n      let searchCriteria = search.toHash();\n\n      searchCriteria.ids = ids;\n\n      return this.gateway.http.post(\n        `${this.config.baseMerchantPath()}/us_bank_account_verifications/advanced_search`,\n        { search: searchCriteria },\n        function (err, response) {\n          if (err) {\n            return callback(err, null);\n          } else if (\n            Array.isArray(\n              response.usBankAccountVerifications.usBankAccountVerification\n            )\n          ) {\n            return response.usBankAccountVerifications.usBankAccountVerification.map(\n              (usBankAccountVerification) =>\n                callback(\n                  null,\n                  new UsBankAccountVerification(usBankAccountVerification)\n                )\n            );\n          }\n\n          return callback(\n            null,\n            new UsBankAccountVerification(\n              response.usBankAccountVerifications.usBankAccountVerification\n            )\n          );\n        }\n      );\n    };\n  }\n}\n\nmodule.exports = {\n  UsBankAccountVerificationGateway: wrapPrototype(\n    UsBankAccountVerificationGateway,\n    {\n      ignoreMethods: [\"search\"],\n    }\n  ),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}