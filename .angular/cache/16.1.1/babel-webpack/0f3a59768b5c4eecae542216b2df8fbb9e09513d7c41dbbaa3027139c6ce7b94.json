{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable new-cap */\nlet http = require(\"http\");\nlet https = require(\"https\");\nlet zlib = require(\"zlib\");\nlet Buffer = require(\"buffer\").Buffer;\nlet fs = require(\"fs\");\nlet path = require(\"path\");\nlet version = require(\"../../package.json\").version;\nlet xml2js = require(\"xml2js\");\nlet exceptions = require(\"./exceptions\");\nlet Util = require(\"./util\").Util;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass Http {\n  constructor(config) {\n    this.config = config;\n  }\n  checkHttpStatus(status) {\n    switch (status.toString()) {\n      case \"200\":\n      case \"201\":\n      case \"422\":\n        return null;\n      case \"401\":\n        return exceptions.AuthenticationError(\"Authentication Error\");\n      case \"403\":\n        return exceptions.AuthorizationError(\"Authorization Error\");\n      case \"404\":\n        return exceptions.NotFoundError(\"Not Found\");\n      case \"408\":\n        return exceptions.RequestTimeoutError(\"Request Timeout Error\");\n      case \"426\":\n        return exceptions.UpgradeRequired(\"Upgrade Required\");\n      case \"429\":\n        return exceptions.TooManyRequestsError(\"Too Many Requests\");\n      case \"500\":\n        return exceptions.ServerError(\"Server Error\");\n      case \"503\":\n        return exceptions.ServiceUnavailableError(\"Service Unavailable Error\");\n      case \"504\":\n        return exceptions.GatewayTimeoutError(\"Gateway Timeout Error\");\n      default:\n        return exceptions.UnexpectedError(`Unexpected HTTP response: ${status}`);\n    }\n  }\n  delete(url) {\n    return this.httpRequest(\"DELETE\", url, null);\n  }\n  get(url) {\n    return this.httpRequest(\"GET\", url, null);\n  }\n  post(url, body) {\n    return this.httpRequest(\"POST\", url, body);\n  }\n  postMultipart(url, body, file) {\n    return this.httpRequest(\"POST\", url, body, file);\n  }\n  put(url, body) {\n    return this.httpRequest(\"PUT\", url, body);\n  }\n  httpRequest(method, url, body, file, host, port, headers) {\n    let boundary, requestBody, requestAborted;\n    let client = this.config.environment.ssl ? https : http;\n    let options = {\n      host: host || this.config.environment.server,\n      port: port || this.config.environment.port,\n      method,\n      path: url,\n      headers: Object.assign({}, this._headers(), headers)\n    };\n    if (this.config.customHttpAgent) {\n      options.agent = this.config.customHttpAgent;\n    }\n    if (file) {\n      boundary = \"boundary\" + Date.now();\n      requestBody = this._prepareMultipart(boundary, body, file);\n      options.headers[\"Content-Type\"] = `multipart/form-data; boundary=${boundary}`;\n    } else if (body) {\n      if (\"application/json\".match(options.headers.Accept)) {\n        requestBody = JSON.stringify(body);\n      } else {\n        requestBody = JSON.stringify(Util.convertObjectKeysToUnderscores(body));\n      }\n    }\n    if (requestBody) {\n      options.headers[\"Content-Length\"] = Buffer.byteLength(requestBody).toString();\n    }\n    return new Promise((resolve, reject) => {\n      let theRequest = client.request(options, response => {\n        let chunks = [];\n        response.on(\"data\", responseBody => {\n          chunks.push(responseBody);\n        });\n        response.on(\"end\", () => {\n          let buffer = Buffer.concat(chunks);\n          let error = this.checkHttpStatus(response.statusCode);\n          if (error) {\n            reject(error);\n            return;\n          }\n          if (buffer.length > 0) {\n            if (response.headers[\"content-encoding\"] === \"gzip\") {\n              zlib.gunzip(buffer, (gunzipError, result) => {\n                if (gunzipError) {\n                  reject(gunzipError);\n                } else {\n                  parseResponse(result.toString(\"utf8\"), response.headers[\"content-type\"]);\n                }\n              });\n            } else {\n              parseResponse(buffer.toString(\"utf8\"), response.headers[\"content-type\"]);\n            }\n          } else {\n            resolve();\n          }\n        });\n        response.on(\"error\", function (err) {\n          let error = exceptions.UnexpectedError(`Unexpected response error: ${err}`);\n          reject(error);\n        });\n      });\n      function parseResponse(responseBody, contentType) {\n        if (responseBody.match(/^\\s+$/)) {\n          resolve({});\n        } else if (contentType && contentType.match(\"application/xml\")) {\n          xml2js.parseStringPromise(responseBody, {\n            attrkey: \"@\",\n            charkey: \"#\",\n            explicitArray: false\n          }).then(result => {\n            resolve(Util.convertNodeToObject(result));\n          }).catch(reject);\n        } else if (contentType && contentType.match(\"application/json\")) {\n          resolve(JSON.parse(responseBody));\n        } else {\n          resolve(responseBody);\n        }\n      }\n      function timeoutHandler() {\n        theRequest.abort();\n        requestAborted = true;\n        let error = exceptions.UnexpectedError(\"Request timed out\");\n        reject(error);\n      }\n      theRequest.setTimeout(this.config.timeout, timeoutHandler);\n      let requestSocket;\n      theRequest.on(\"socket\", socket => {\n        requestSocket = socket;\n      });\n      theRequest.on(\"error\", err => {\n        if (requestAborted) {\n          return;\n        }\n        if (this.config.timeout > 0 && requestSocket) {\n          requestSocket.removeListener(\"timeout\", timeoutHandler);\n        }\n        let error = exceptions.UnexpectedError(`Unexpected request error: ${err}`);\n        reject(error);\n      });\n      if (body) {\n        theRequest.write(requestBody);\n      }\n      theRequest.end();\n    });\n  }\n  _prepareMultipart(boundary, body, file) {\n    let requestBody = Buffer.concat([this._filePart(\"file\", file, boundary)]);\n    for (const key of Object.keys(body)) {\n      let val = body[key];\n      requestBody = Buffer.concat([requestBody, this._formPart(key, val, boundary)]);\n    }\n    return Buffer.concat([requestBody, Buffer.from(`--${boundary}--\\r\\n\\r\\n`)]);\n  }\n  _partHeader(key, filename, boundary) {\n    let part = `--${boundary}`;\n    part += \"\\r\\n\";\n    part += `Content-Disposition: form-data; name=\"${key}\"`;\n    if (filename) {\n      part += `; filename=\"${filename}\"`;\n      part += \"\\r\\n\";\n      part += `Content-Type: ${this._filetype(filename)}`;\n    }\n    part += \"\\r\\n\\r\\n\";\n    return part;\n  }\n  _formPart(key, formPart, boundary) {\n    return Buffer.concat([Buffer.from(this._partHeader(key, null, boundary)), Buffer.from(formPart + \"\\r\\n\")]);\n  }\n  _filePart(key, readStream, boundary) {\n    let part = Buffer.from(this._partHeader(key, path.basename(readStream.path), boundary));\n    let fileData = fs.readFileSync(readStream.path);\n    return Buffer.concat([part, fileData, Buffer.from(\"\\r\\n\")]);\n  }\n  _filetype(filename) {\n    let ext = path.extname(filename);\n    if (ext === \".jpeg\" || ext === \".jpg\") {\n      return \"image/jpeg\";\n    } else if (ext === \".png\") {\n      return \"image/png\";\n    } else if (ext === \".pdf\") {\n      return \"application/pdf\";\n    }\n    return \"application/octet-stream\";\n  }\n  _headers() {\n    return {\n      Authorization: this.authorizationHeader(),\n      \"X-ApiVersion\": this.config.apiVersion,\n      Accept: \"application/xml\",\n      \"Content-Type\": \"application/json\",\n      \"User-Agent\": `Braintree Node ${version}`,\n      \"Accept-Encoding\": \"gzip\"\n    };\n  }\n  authorizationHeader() {\n    if (this.config.accessToken) {\n      return `Bearer ${this.config.accessToken}`;\n    } else if (this.config.clientId) {\n      return `Basic ${Buffer.from(this.config.clientId + \":\" + this.config.clientSecret).toString(\"base64\")}`;\n    }\n    return `Basic ${Buffer.from(this.config.publicKey + \":\" + this.config.privateKey).toString(\"base64\")}`;\n  }\n}\nmodule.exports = {\n  Http: wrapPrototype(Http)\n};","map":{"version":3,"names":["http","require","https","zlib","Buffer","fs","path","version","xml2js","exceptions","Util","wrapPrototype","Http","constructor","config","checkHttpStatus","status","toString","AuthenticationError","AuthorizationError","NotFoundError","RequestTimeoutError","UpgradeRequired","TooManyRequestsError","ServerError","ServiceUnavailableError","GatewayTimeoutError","UnexpectedError","delete","url","httpRequest","get","post","body","postMultipart","file","put","method","host","port","headers","boundary","requestBody","requestAborted","client","environment","ssl","options","server","Object","assign","_headers","customHttpAgent","agent","Date","now","_prepareMultipart","match","Accept","JSON","stringify","convertObjectKeysToUnderscores","byteLength","Promise","resolve","reject","theRequest","request","response","chunks","on","responseBody","push","buffer","concat","error","statusCode","length","gunzip","gunzipError","result","parseResponse","err","contentType","parseStringPromise","attrkey","charkey","explicitArray","then","convertNodeToObject","catch","parse","timeoutHandler","abort","setTimeout","timeout","requestSocket","socket","removeListener","write","end","_filePart","key","keys","val","_formPart","from","_partHeader","filename","part","_filetype","formPart","readStream","basename","fileData","readFileSync","ext","extname","Authorization","authorizationHeader","apiVersion","accessToken","clientId","clientSecret","publicKey","privateKey","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/http.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable new-cap */\n\nlet http = require(\"http\");\nlet https = require(\"https\");\nlet zlib = require(\"zlib\");\nlet Buffer = require(\"buffer\").Buffer;\nlet fs = require(\"fs\");\nlet path = require(\"path\");\n\nlet version = require(\"../../package.json\").version;\nlet xml2js = require(\"xml2js\");\nlet exceptions = require(\"./exceptions\");\nlet Util = require(\"./util\").Util;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass Http {\n  constructor(config) {\n    this.config = config;\n  }\n\n  checkHttpStatus(status) {\n    switch (status.toString()) {\n      case \"200\":\n      case \"201\":\n      case \"422\":\n        return null;\n      case \"401\":\n        return exceptions.AuthenticationError(\"Authentication Error\");\n      case \"403\":\n        return exceptions.AuthorizationError(\"Authorization Error\");\n      case \"404\":\n        return exceptions.NotFoundError(\"Not Found\");\n      case \"408\":\n        return exceptions.RequestTimeoutError(\"Request Timeout Error\");\n      case \"426\":\n        return exceptions.UpgradeRequired(\"Upgrade Required\");\n      case \"429\":\n        return exceptions.TooManyRequestsError(\"Too Many Requests\");\n      case \"500\":\n        return exceptions.ServerError(\"Server Error\");\n      case \"503\":\n        return exceptions.ServiceUnavailableError(\"Service Unavailable Error\");\n      case \"504\":\n        return exceptions.GatewayTimeoutError(\"Gateway Timeout Error\");\n      default:\n        return exceptions.UnexpectedError(\n          `Unexpected HTTP response: ${status}`\n        );\n    }\n  }\n\n  delete(url) {\n    return this.httpRequest(\"DELETE\", url, null);\n  }\n\n  get(url) {\n    return this.httpRequest(\"GET\", url, null);\n  }\n\n  post(url, body) {\n    return this.httpRequest(\"POST\", url, body);\n  }\n\n  postMultipart(url, body, file) {\n    return this.httpRequest(\"POST\", url, body, file);\n  }\n\n  put(url, body) {\n    return this.httpRequest(\"PUT\", url, body);\n  }\n\n  httpRequest(method, url, body, file, host, port, headers) {\n    let boundary, requestBody, requestAborted;\n    let client = this.config.environment.ssl ? https : http;\n\n    let options = {\n      host: host || this.config.environment.server,\n      port: port || this.config.environment.port,\n      method,\n      path: url,\n      headers: Object.assign({}, this._headers(), headers),\n    };\n\n    if (this.config.customHttpAgent) {\n      options.agent = this.config.customHttpAgent;\n    }\n\n    if (file) {\n      boundary = \"boundary\" + Date.now();\n      requestBody = this._prepareMultipart(boundary, body, file);\n      options.headers[\n        \"Content-Type\"\n      ] = `multipart/form-data; boundary=${boundary}`;\n    } else if (body) {\n      if (\"application/json\".match(options.headers.Accept)) {\n        requestBody = JSON.stringify(body);\n      } else {\n        requestBody = JSON.stringify(Util.convertObjectKeysToUnderscores(body));\n      }\n    }\n\n    if (requestBody) {\n      options.headers[\"Content-Length\"] =\n        Buffer.byteLength(requestBody).toString();\n    }\n\n    return new Promise((resolve, reject) => {\n      let theRequest = client.request(options, (response) => {\n        let chunks = [];\n\n        response.on(\"data\", (responseBody) => {\n          chunks.push(responseBody);\n        });\n\n        response.on(\"end\", () => {\n          let buffer = Buffer.concat(chunks);\n          let error = this.checkHttpStatus(response.statusCode);\n\n          if (error) {\n            reject(error);\n\n            return;\n          }\n\n          if (buffer.length > 0) {\n            if (response.headers[\"content-encoding\"] === \"gzip\") {\n              zlib.gunzip(buffer, (gunzipError, result) => {\n                if (gunzipError) {\n                  reject(gunzipError);\n                } else {\n                  parseResponse(\n                    result.toString(\"utf8\"),\n                    response.headers[\"content-type\"]\n                  );\n                }\n              });\n            } else {\n              parseResponse(\n                buffer.toString(\"utf8\"),\n                response.headers[\"content-type\"]\n              );\n            }\n          } else {\n            resolve();\n          }\n        });\n\n        response.on(\"error\", function (err) {\n          let error = exceptions.UnexpectedError(\n            `Unexpected response error: ${err}`\n          );\n\n          reject(error);\n        });\n      });\n\n      function parseResponse(responseBody, contentType) {\n        if (responseBody.match(/^\\s+$/)) {\n          resolve({});\n        } else if (contentType && contentType.match(\"application/xml\")) {\n          xml2js\n            .parseStringPromise(responseBody, {\n              attrkey: \"@\",\n              charkey: \"#\",\n              explicitArray: false,\n            })\n            .then((result) => {\n              resolve(Util.convertNodeToObject(result));\n            })\n            .catch(reject);\n        } else if (contentType && contentType.match(\"application/json\")) {\n          resolve(JSON.parse(responseBody));\n        } else {\n          resolve(responseBody);\n        }\n      }\n\n      function timeoutHandler() {\n        theRequest.abort();\n        requestAborted = true;\n        let error = exceptions.UnexpectedError(\"Request timed out\");\n\n        reject(error);\n      }\n\n      theRequest.setTimeout(this.config.timeout, timeoutHandler);\n\n      let requestSocket;\n\n      theRequest.on(\"socket\", (socket) => {\n        requestSocket = socket;\n      });\n\n      theRequest.on(\"error\", (err) => {\n        if (requestAborted) {\n          return;\n        }\n        if (this.config.timeout > 0 && requestSocket) {\n          requestSocket.removeListener(\"timeout\", timeoutHandler);\n        }\n        let error = exceptions.UnexpectedError(\n          `Unexpected request error: ${err}`\n        );\n\n        reject(error);\n      });\n\n      if (body) {\n        theRequest.write(requestBody);\n      }\n      theRequest.end();\n    });\n  }\n\n  _prepareMultipart(boundary, body, file) {\n    let requestBody = Buffer.concat([this._filePart(\"file\", file, boundary)]);\n\n    for (const key of Object.keys(body)) {\n      let val = body[key];\n\n      requestBody = Buffer.concat([\n        requestBody,\n        this._formPart(key, val, boundary),\n      ]);\n    }\n\n    return Buffer.concat([requestBody, Buffer.from(`--${boundary}--\\r\\n\\r\\n`)]);\n  }\n\n  _partHeader(key, filename, boundary) {\n    let part = `--${boundary}`;\n\n    part += \"\\r\\n\";\n    part += `Content-Disposition: form-data; name=\"${key}\"`;\n    if (filename) {\n      part += `; filename=\"${filename}\"`;\n      part += \"\\r\\n\";\n      part += `Content-Type: ${this._filetype(filename)}`;\n    }\n    part += \"\\r\\n\\r\\n\";\n\n    return part;\n  }\n\n  _formPart(key, formPart, boundary) {\n    return Buffer.concat([\n      Buffer.from(this._partHeader(key, null, boundary)),\n      Buffer.from(formPart + \"\\r\\n\"),\n    ]);\n  }\n\n  _filePart(key, readStream, boundary) {\n    let part = Buffer.from(\n      this._partHeader(key, path.basename(readStream.path), boundary)\n    );\n    let fileData = fs.readFileSync(readStream.path);\n\n    return Buffer.concat([part, fileData, Buffer.from(\"\\r\\n\")]);\n  }\n\n  _filetype(filename) {\n    let ext = path.extname(filename);\n\n    if (ext === \".jpeg\" || ext === \".jpg\") {\n      return \"image/jpeg\";\n    } else if (ext === \".png\") {\n      return \"image/png\";\n    } else if (ext === \".pdf\") {\n      return \"application/pdf\";\n    }\n\n    return \"application/octet-stream\";\n  }\n\n  _headers() {\n    return {\n      Authorization: this.authorizationHeader(),\n      \"X-ApiVersion\": this.config.apiVersion,\n      Accept: \"application/xml\",\n      \"Content-Type\": \"application/json\",\n      \"User-Agent\": `Braintree Node ${version}`,\n      \"Accept-Encoding\": \"gzip\",\n    };\n  }\n\n  authorizationHeader() {\n    if (this.config.accessToken) {\n      return `Bearer ${this.config.accessToken}`;\n    } else if (this.config.clientId) {\n      return `Basic ${Buffer.from(\n        this.config.clientId + \":\" + this.config.clientSecret\n      ).toString(\"base64\")}`;\n    }\n\n    return `Basic ${Buffer.from(\n      this.config.publicKey + \":\" + this.config.privateKey\n    ).toString(\"base64\")}`;\n  }\n}\n\nmodule.exports = { Http: wrapPrototype(Http) };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}