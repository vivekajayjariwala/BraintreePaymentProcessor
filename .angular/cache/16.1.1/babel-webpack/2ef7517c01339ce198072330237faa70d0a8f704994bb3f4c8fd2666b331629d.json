{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Environment = require(\"./environment\").Environment;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass TestingGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  settle(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, \"settle\");\n  }\n  settlementPending(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, \"settlement_pending\");\n  }\n  settlementConfirm(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, \"settlement_confirm\");\n  }\n  settlementDecline(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, \"settlement_decline\");\n  }\n  settlementOperationWithEnvironmentCheck(transactionId, operation) {\n    if (this.config.environment === Environment.Production) {\n      return Promise.reject(\n      // eslint-disable-next-line new-cap\n      exceptions.TestOperationPerformedInProductionError(\"Test operation performed in production\"), null);\n    }\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/${operation}`, null);\n  }\n}\nmodule.exports = {\n  TestingGateway: wrapPrototype(TestingGateway)\n};","map":{"version":3,"names":["Gateway","require","Environment","exceptions","wrapPrototype","TestingGateway","constructor","gateway","config","settle","transactionId","settlementOperationWithEnvironmentCheck","settlementPending","settlementConfirm","settlementDecline","operation","environment","Production","Promise","reject","TestOperationPerformedInProductionError","http","put","baseMerchantPath","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/testing_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Environment = require(\"./environment\").Environment;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass TestingGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  settle(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(\n      transactionId,\n      \"settle\"\n    );\n  }\n\n  settlementPending(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(\n      transactionId,\n      \"settlement_pending\"\n    );\n  }\n\n  settlementConfirm(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(\n      transactionId,\n      \"settlement_confirm\"\n    );\n  }\n\n  settlementDecline(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(\n      transactionId,\n      \"settlement_decline\"\n    );\n  }\n\n  settlementOperationWithEnvironmentCheck(transactionId, operation) {\n    if (this.config.environment === Environment.Production) {\n      return Promise.reject(\n        // eslint-disable-next-line new-cap\n        exceptions.TestOperationPerformedInProductionError(\n          \"Test operation performed in production\"\n        ),\n        null\n      );\n    }\n\n    return this.gateway.http.put(\n      `${this.config.baseMerchantPath()}/transactions/${transactionId}/${operation}`,\n      null\n    );\n  }\n}\n\nmodule.exports = { TestingGateway: wrapPrototype(TestingGateway) };\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC,CAACD,OAAO;AAC1C,IAAIE,WAAW,GAAGD,OAAO,CAAC,eAAe,CAAC,CAACC,WAAW;AACtD,IAAIC,UAAU,GAAGF,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIG,aAAa,GAAGH,OAAO,CAAC,yBAAyB,CAAC,CAACG,aAAa;AAEpE,MAAMC,cAAc,SAASL,OAAO,CAAC;EACnCM,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,OAAO,CAACC,MAAM;EACnC;EAEAC,MAAMA,CAACC,aAAa,EAAE;IACpB,OAAO,IAAI,CAACC,uCAAuC,CACjDD,aAAa,EACb,QACF,CAAC;EACH;EAEAE,iBAAiBA,CAACF,aAAa,EAAE;IAC/B,OAAO,IAAI,CAACC,uCAAuC,CACjDD,aAAa,EACb,oBACF,CAAC;EACH;EAEAG,iBAAiBA,CAACH,aAAa,EAAE;IAC/B,OAAO,IAAI,CAACC,uCAAuC,CACjDD,aAAa,EACb,oBACF,CAAC;EACH;EAEAI,iBAAiBA,CAACJ,aAAa,EAAE;IAC/B,OAAO,IAAI,CAACC,uCAAuC,CACjDD,aAAa,EACb,oBACF,CAAC;EACH;EAEAC,uCAAuCA,CAACD,aAAa,EAAEK,SAAS,EAAE;IAChE,IAAI,IAAI,CAACP,MAAM,CAACQ,WAAW,KAAKd,WAAW,CAACe,UAAU,EAAE;MACtD,OAAOC,OAAO,CAACC,MAAM;MACnB;MACAhB,UAAU,CAACiB,uCAAuC,CAChD,wCACF,CAAC,EACD,IACF,CAAC;IACH;IAEA,OAAO,IAAI,CAACb,OAAO,CAACc,IAAI,CAACC,GAAG,CACzB,GAAE,IAAI,CAACd,MAAM,CAACe,gBAAgB,CAAC,CAAE,iBAAgBb,aAAc,IAAGK,SAAU,EAAC,EAC9E,IACF,CAAC;EACH;AACF;AAEAS,MAAM,CAACC,OAAO,GAAG;EAAEpB,cAAc,EAAED,aAAa,CAACC,cAAc;AAAE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}