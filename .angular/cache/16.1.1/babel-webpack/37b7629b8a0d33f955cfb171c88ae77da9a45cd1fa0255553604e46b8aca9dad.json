{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet CreditCardVerification = require(\"./credit_card_verification\").CreditCardVerification;\nlet CreditCardVerificationSearch = require(\"./credit_card_verification_search\").CreditCardVerificationSearch;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass CreditCardVerificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  find(creditCardVerificationId) {\n    if (creditCardVerificationId.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\")); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/verifications/${creditCardVerificationId}`).then(function (response) {\n      return new CreditCardVerification(response.verification);\n    });\n  }\n  search(fn, callback) {\n    let search = new CreditCardVerificationSearch();\n    fn(search);\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/verifications/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n  create(params) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/verifications`, {\n      verification: params\n    }).then(this.createResponseHandler(\"verification\", CreditCardVerification));\n  }\n  responseHandler() {\n    return this.createResponseHandler(\"creditCardVerification\", CreditCardVerification);\n  }\n  pagingFunctionGenerator(search) {\n    return (ids, callback) => {\n      let searchCriteria = search.toHash();\n      searchCriteria.ids = ids;\n      return this.gateway.http.post(`${this.config.baseMerchantPath()}/verifications/advanced_search`, {\n        search: searchCriteria\n      }, function (err, response) {\n        if (err) {\n          return callback(err, null);\n        } else if (Array.isArray(response.creditCardVerifications.verification)) {\n          return response.creditCardVerifications.verification.map(creditCardVerification => callback(null, new CreditCardVerification(creditCardVerification)));\n        }\n        return callback(null, new CreditCardVerification(response.creditCardVerifications.verification));\n      });\n    };\n  }\n}\nmodule.exports = {\n  CreditCardVerificationGateway: wrapPrototype(CreditCardVerificationGateway, {\n    ignoreMethods: [\"search\"]\n  })\n};","map":{"version":3,"names":["Gateway","require","CreditCardVerification","CreditCardVerificationSearch","exceptions","wrapPrototype","CreditCardVerificationGateway","constructor","gateway","config","find","creditCardVerificationId","trim","Promise","reject","NotFoundError","http","get","baseMerchantPath","then","response","verification","search","fn","callback","createSearchResponse","pagingFunctionGenerator","create","params","post","createResponseHandler","responseHandler","ids","searchCriteria","toHash","err","Array","isArray","creditCardVerifications","map","creditCardVerification","module","exports","ignoreMethods"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/credit_card_verification_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet CreditCardVerification =\n  require(\"./credit_card_verification\").CreditCardVerification;\nlet CreditCardVerificationSearch =\n  require(\"./credit_card_verification_search\").CreditCardVerificationSearch;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass CreditCardVerificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(creditCardVerificationId) {\n    if (creditCardVerificationId.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\")); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http\n      .get(\n        `${this.config.baseMerchantPath()}/verifications/${creditCardVerificationId}`\n      )\n      .then(function (response) {\n        return new CreditCardVerification(response.verification);\n      });\n  }\n\n  search(fn, callback) {\n    let search = new CreditCardVerificationSearch();\n\n    fn(search);\n\n    return this.createSearchResponse(\n      `${this.config.baseMerchantPath()}/verifications/advanced_search_ids`,\n      search,\n      this.pagingFunctionGenerator(search),\n      callback\n    );\n  }\n\n  create(params) {\n    return this.gateway.http\n      .post(`${this.config.baseMerchantPath()}/verifications`, {\n        verification: params,\n      })\n      .then(this.createResponseHandler(\"verification\", CreditCardVerification));\n  }\n\n  responseHandler() {\n    return this.createResponseHandler(\n      \"creditCardVerification\",\n      CreditCardVerification\n    );\n  }\n\n  pagingFunctionGenerator(search) {\n    return (ids, callback) => {\n      let searchCriteria = search.toHash();\n\n      searchCriteria.ids = ids;\n\n      return this.gateway.http.post(\n        `${this.config.baseMerchantPath()}/verifications/advanced_search`,\n        { search: searchCriteria },\n        function (err, response) {\n          if (err) {\n            return callback(err, null);\n          } else if (\n            Array.isArray(response.creditCardVerifications.verification)\n          ) {\n            return response.creditCardVerifications.verification.map(\n              (creditCardVerification) =>\n                callback(\n                  null,\n                  new CreditCardVerification(creditCardVerification)\n                )\n            );\n          }\n\n          return callback(\n            null,\n            new CreditCardVerification(\n              response.creditCardVerifications.verification\n            )\n          );\n        }\n      );\n    };\n  }\n}\n\nmodule.exports = {\n  CreditCardVerificationGateway: wrapPrototype(CreditCardVerificationGateway, {\n    ignoreMethods: [\"search\"],\n  }),\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC,CAACD,OAAO;AAC1C,IAAIE,sBAAsB,GACxBD,OAAO,CAAC,4BAA4B,CAAC,CAACC,sBAAsB;AAC9D,IAAIC,4BAA4B,GAC9BF,OAAO,CAAC,mCAAmC,CAAC,CAACE,4BAA4B;AAC3E,IAAIC,UAAU,GAAGH,OAAO,CAAC,cAAc,CAAC;AACxC,IAAII,aAAa,GAAGJ,OAAO,CAAC,yBAAyB,CAAC,CAACI,aAAa;AAEpE,MAAMC,6BAA6B,SAASN,OAAO,CAAC;EAClDO,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,OAAO,CAACC,MAAM;EACnC;EAEAC,IAAIA,CAACC,wBAAwB,EAAE;IAC7B,IAAIA,wBAAwB,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC1C,OAAOC,OAAO,CAACC,MAAM,CAACV,UAAU,CAACW,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAChE;;IAEA,OAAO,IAAI,CAACP,OAAO,CAACQ,IAAI,CACrBC,GAAG,CACD,GAAE,IAAI,CAACR,MAAM,CAACS,gBAAgB,CAAC,CAAE,kBAAiBP,wBAAyB,EAC9E,CAAC,CACAQ,IAAI,CAAC,UAAUC,QAAQ,EAAE;MACxB,OAAO,IAAIlB,sBAAsB,CAACkB,QAAQ,CAACC,YAAY,CAAC;IAC1D,CAAC,CAAC;EACN;EAEAC,MAAMA,CAACC,EAAE,EAAEC,QAAQ,EAAE;IACnB,IAAIF,MAAM,GAAG,IAAInB,4BAA4B,CAAC,CAAC;IAE/CoB,EAAE,CAACD,MAAM,CAAC;IAEV,OAAO,IAAI,CAACG,oBAAoB,CAC7B,GAAE,IAAI,CAAChB,MAAM,CAACS,gBAAgB,CAAC,CAAE,oCAAmC,EACrEI,MAAM,EACN,IAAI,CAACI,uBAAuB,CAACJ,MAAM,CAAC,EACpCE,QACF,CAAC;EACH;EAEAG,MAAMA,CAACC,MAAM,EAAE;IACb,OAAO,IAAI,CAACpB,OAAO,CAACQ,IAAI,CACrBa,IAAI,CAAE,GAAE,IAAI,CAACpB,MAAM,CAACS,gBAAgB,CAAC,CAAE,gBAAe,EAAE;MACvDG,YAAY,EAAEO;IAChB,CAAC,CAAC,CACDT,IAAI,CAAC,IAAI,CAACW,qBAAqB,CAAC,cAAc,EAAE5B,sBAAsB,CAAC,CAAC;EAC7E;EAEA6B,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACD,qBAAqB,CAC/B,wBAAwB,EACxB5B,sBACF,CAAC;EACH;EAEAwB,uBAAuBA,CAACJ,MAAM,EAAE;IAC9B,OAAO,CAACU,GAAG,EAAER,QAAQ,KAAK;MACxB,IAAIS,cAAc,GAAGX,MAAM,CAACY,MAAM,CAAC,CAAC;MAEpCD,cAAc,CAACD,GAAG,GAAGA,GAAG;MAExB,OAAO,IAAI,CAACxB,OAAO,CAACQ,IAAI,CAACa,IAAI,CAC1B,GAAE,IAAI,CAACpB,MAAM,CAACS,gBAAgB,CAAC,CAAE,gCAA+B,EACjE;QAAEI,MAAM,EAAEW;MAAe,CAAC,EAC1B,UAAUE,GAAG,EAAEf,QAAQ,EAAE;QACvB,IAAIe,GAAG,EAAE;UACP,OAAOX,QAAQ,CAACW,GAAG,EAAE,IAAI,CAAC;QAC5B,CAAC,MAAM,IACLC,KAAK,CAACC,OAAO,CAACjB,QAAQ,CAACkB,uBAAuB,CAACjB,YAAY,CAAC,EAC5D;UACA,OAAOD,QAAQ,CAACkB,uBAAuB,CAACjB,YAAY,CAACkB,GAAG,CACrDC,sBAAsB,IACrBhB,QAAQ,CACN,IAAI,EACJ,IAAItB,sBAAsB,CAACsC,sBAAsB,CACnD,CACJ,CAAC;QACH;QAEA,OAAOhB,QAAQ,CACb,IAAI,EACJ,IAAItB,sBAAsB,CACxBkB,QAAQ,CAACkB,uBAAuB,CAACjB,YACnC,CACF,CAAC;MACH,CACF,CAAC;IACH,CAAC;EACH;AACF;AAEAoB,MAAM,CAACC,OAAO,GAAG;EACfpC,6BAA6B,EAAED,aAAa,CAACC,6BAA6B,EAAE;IAC1EqC,aAAa,EAAE,CAAC,QAAQ;EAC1B,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}