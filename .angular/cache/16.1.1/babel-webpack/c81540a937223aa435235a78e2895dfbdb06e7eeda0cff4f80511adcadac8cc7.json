{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Dispute = require(\"./dispute\").Dispute;\nlet DisputeSearch = require(\"./dispute_search\").DisputeSearch;\nlet InvalidKeysError = require(\"./exceptions\").InvalidKeysError;\nlet NotFoundError = require(\"./exceptions\").NotFoundError;\nlet PaginatedResponse = require(\"./paginated_response\").PaginatedResponse;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass DisputeGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  accept(id) {\n    let notFoundError = new NotFoundError(\"dispute with id '\" + id + \"' not found\");\n    if (id == null || id.trim() === \"\") {\n      return Promise.reject(notFoundError);\n    }\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/disputes/${id}/accept`).then(this.createResponseHandler(\"dispute\", Dispute)).catch(this.createRejectionHandler(notFoundError));\n  }\n  addTextEvidence(id, contentOrRequest) {\n    const isRequest = contentOrRequest != null && typeof contentOrRequest === \"object\";\n    const request = isRequest ? contentOrRequest : {\n      content: contentOrRequest\n    };\n    let notFoundError = new NotFoundError(\"dispute with id '\" + id + \"' not found\");\n    if (id == null || id.trim() === \"\") {\n      return Promise.reject(notFoundError);\n    }\n    if (request.content == null || request.content.trim() === \"\") {\n      return Promise.reject(new InvalidKeysError(\"content cannot be null or empty\"));\n    }\n    const evidence = {\n      comments: request.content\n    };\n    if (request.sequenceNumber != null) {\n      if (String(request.sequenceNumber) !== String(parseInt(request.sequenceNumber, 10))) {\n        return Promise.reject(new InvalidKeysError(\"sequenceNumber must be a number\"));\n      }\n      evidence.sequence_number = parseInt(request.sequenceNumber, 10); // eslint-disable-line camelcase\n    }\n\n    if (request.category != null) {\n      if (typeof request.category !== \"string\") {\n        return Promise.reject(new InvalidKeysError(\"category must be a string\"));\n      } else if (request.category.trim() === \"\") {\n        return Promise.reject(new InvalidKeysError(\"category cannot be empty\"));\n      }\n      evidence.category = request.category;\n    }\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/disputes/${id}/evidence`, {\n      evidence\n    }).then(this.createResponseHandler()).catch(this.createRejectionHandler(notFoundError));\n  }\n  addFileEvidence(disputeId, documentIdOrRequest) {\n    const isRequest = documentIdOrRequest != null && typeof documentIdOrRequest === \"object\";\n    const request = isRequest ? documentIdOrRequest : {\n      documentId: documentIdOrRequest\n    };\n    let notFoundError = new NotFoundError(\"dispute with id '\" + disputeId + \"' not found\");\n    if (disputeId == null || disputeId.trim() === \"\") {\n      return Promise.reject(notFoundError);\n    }\n    if (request.documentId == null || request.documentId.trim() === \"\") {\n      return Promise.reject(new NotFoundError(\"document with id '\" + request.documentId + \"' not found\"));\n    }\n    const evidence = {\n      document_upload_id: request.documentId,\n      // eslint-disable-line camelcase\n      category: request.category\n    };\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/disputes/${disputeId}/evidence`, {\n      evidence\n    }).then(this.createResponseHandler()).catch(this.createRejectionHandler(notFoundError));\n  }\n  finalize(id) {\n    let notFoundError = new NotFoundError(`dispute with id '${id}' not found`);\n    if (id == null || id.trim() === \"\") {\n      return Promise.reject(notFoundError);\n    }\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/disputes/${id}/finalize`).then(this.createResponseHandler()).catch(this.createRejectionHandler(notFoundError));\n  }\n  find(id) {\n    let notFoundError = new NotFoundError(`dispute with id '${id}' not found`);\n    if (id == null || id.trim() === \"\") {\n      return Promise.reject(notFoundError);\n    }\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/disputes/${id}`).then(this.createResponseHandler(\"dispute\", Dispute)).catch(this.createRejectionHandler(notFoundError));\n  }\n  removeEvidence(disputeId, evidenceId) {\n    let notFoundError = new NotFoundError(\"evidence with id '\" + evidenceId + \"' for dispute with id '\" + disputeId + \"' not found\");\n    if (disputeId == null || disputeId.trim() === \"\" || evidenceId == null || evidenceId.trim() === \"\") {\n      return Promise.reject(notFoundError);\n    }\n    return this.gateway.http.delete(`${this.config.baseMerchantPath()}/disputes/${disputeId}/evidence/${evidenceId}`).then(this.createResponseHandler()).catch(this.createRejectionHandler(notFoundError));\n  }\n  search(searchFunction, callback) {\n    let search = new DisputeSearch();\n    searchFunction(search);\n    let response = new PaginatedResponse(this.fetchDisputes.bind(this), {\n      search: search.toHash()\n    });\n    if (callback != null) {\n      return response.all(callback);\n    }\n    response.ready();\n    return response.stream;\n  }\n  fetchDisputes(pageNumber, search, callback) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/disputes/advanced_search?page=${pageNumber}`, {\n      search: search\n    }, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n      let totalItems = response.disputes.totalItems;\n      let pageSize = response.disputes.pageSize;\n      let disputes = response.disputes.dispute;\n      if (!disputes) {\n        disputes = [null];\n      } else if (!Array.isArray(disputes)) {\n        disputes = [disputes];\n      }\n      return callback(null, totalItems, pageSize, disputes);\n    });\n  }\n  createRejectionHandler(notFoundError) {\n    return function (err) {\n      if (err.type === \"notFoundError\") {\n        err = notFoundError;\n      }\n      return Promise.reject(err);\n    };\n  }\n}\nmodule.exports = {\n  DisputeGateway: wrapPrototype(DisputeGateway, {\n    ignoreMethods: [\"search\", \"fetchDisputes\"]\n  })\n};","map":{"version":3,"names":["Gateway","require","Dispute","DisputeSearch","InvalidKeysError","NotFoundError","PaginatedResponse","wrapPrototype","DisputeGateway","constructor","gateway","config","accept","id","notFoundError","trim","Promise","reject","http","put","baseMerchantPath","then","createResponseHandler","catch","createRejectionHandler","addTextEvidence","contentOrRequest","isRequest","request","content","evidence","comments","sequenceNumber","String","parseInt","sequence_number","category","post","addFileEvidence","disputeId","documentIdOrRequest","documentId","document_upload_id","finalize","find","get","removeEvidence","evidenceId","delete","search","searchFunction","callback","response","fetchDisputes","bind","toHash","all","ready","stream","pageNumber","err","totalItems","disputes","pageSize","dispute","Array","isArray","type","module","exports","ignoreMethods"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/dispute_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Dispute = require(\"./dispute\").Dispute;\nlet DisputeSearch = require(\"./dispute_search\").DisputeSearch;\nlet InvalidKeysError = require(\"./exceptions\").InvalidKeysError;\nlet NotFoundError = require(\"./exceptions\").NotFoundError;\nlet PaginatedResponse = require(\"./paginated_response\").PaginatedResponse;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass DisputeGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  accept(id) {\n    let notFoundError = new NotFoundError(\n      \"dispute with id '\" + id + \"' not found\"\n    );\n\n    if (id == null || id.trim() === \"\") {\n      return Promise.reject(notFoundError);\n    }\n\n    return this.gateway.http\n      .put(`${this.config.baseMerchantPath()}/disputes/${id}/accept`)\n      .then(this.createResponseHandler(\"dispute\", Dispute))\n      .catch(this.createRejectionHandler(notFoundError));\n  }\n\n  addTextEvidence(id, contentOrRequest) {\n    const isRequest =\n      contentOrRequest != null && typeof contentOrRequest === \"object\";\n    const request = isRequest\n      ? contentOrRequest\n      : { content: contentOrRequest };\n    let notFoundError = new NotFoundError(\n      \"dispute with id '\" + id + \"' not found\"\n    );\n\n    if (id == null || id.trim() === \"\") {\n      return Promise.reject(notFoundError);\n    }\n\n    if (request.content == null || request.content.trim() === \"\") {\n      return Promise.reject(\n        new InvalidKeysError(\"content cannot be null or empty\")\n      );\n    }\n\n    const evidence = {\n      comments: request.content,\n    };\n\n    if (request.sequenceNumber != null) {\n      if (\n        String(request.sequenceNumber) !==\n        String(parseInt(request.sequenceNumber, 10))\n      ) {\n        return Promise.reject(\n          new InvalidKeysError(\"sequenceNumber must be a number\")\n        );\n      }\n      evidence.sequence_number = parseInt(request.sequenceNumber, 10); // eslint-disable-line camelcase\n    }\n\n    if (request.category != null) {\n      if (typeof request.category !== \"string\") {\n        return Promise.reject(\n          new InvalidKeysError(\"category must be a string\")\n        );\n      } else if (request.category.trim() === \"\") {\n        return Promise.reject(new InvalidKeysError(\"category cannot be empty\"));\n      }\n      evidence.category = request.category;\n    }\n\n    return this.gateway.http\n      .post(`${this.config.baseMerchantPath()}/disputes/${id}/evidence`, {\n        evidence,\n      })\n      .then(this.createResponseHandler())\n      .catch(this.createRejectionHandler(notFoundError));\n  }\n\n  addFileEvidence(disputeId, documentIdOrRequest) {\n    const isRequest =\n      documentIdOrRequest != null && typeof documentIdOrRequest === \"object\";\n    const request = isRequest\n      ? documentIdOrRequest\n      : { documentId: documentIdOrRequest };\n    let notFoundError = new NotFoundError(\n      \"dispute with id '\" + disputeId + \"' not found\"\n    );\n\n    if (disputeId == null || disputeId.trim() === \"\") {\n      return Promise.reject(notFoundError);\n    }\n\n    if (request.documentId == null || request.documentId.trim() === \"\") {\n      return Promise.reject(\n        new NotFoundError(\n          \"document with id '\" + request.documentId + \"' not found\"\n        )\n      );\n    }\n\n    const evidence = {\n      document_upload_id: request.documentId, // eslint-disable-line camelcase\n      category: request.category,\n    };\n\n    return this.gateway.http\n      .post(\n        `${this.config.baseMerchantPath()}/disputes/${disputeId}/evidence`,\n        {\n          evidence,\n        }\n      )\n      .then(this.createResponseHandler())\n      .catch(this.createRejectionHandler(notFoundError));\n  }\n\n  finalize(id) {\n    let notFoundError = new NotFoundError(`dispute with id '${id}' not found`);\n\n    if (id == null || id.trim() === \"\") {\n      return Promise.reject(notFoundError);\n    }\n\n    return this.gateway.http\n      .put(`${this.config.baseMerchantPath()}/disputes/${id}/finalize`)\n      .then(this.createResponseHandler())\n      .catch(this.createRejectionHandler(notFoundError));\n  }\n\n  find(id) {\n    let notFoundError = new NotFoundError(`dispute with id '${id}' not found`);\n\n    if (id == null || id.trim() === \"\") {\n      return Promise.reject(notFoundError);\n    }\n\n    return this.gateway.http\n      .get(`${this.config.baseMerchantPath()}/disputes/${id}`)\n      .then(this.createResponseHandler(\"dispute\", Dispute))\n      .catch(this.createRejectionHandler(notFoundError));\n  }\n\n  removeEvidence(disputeId, evidenceId) {\n    let notFoundError = new NotFoundError(\n      \"evidence with id '\" +\n        evidenceId +\n        \"' for dispute with id '\" +\n        disputeId +\n        \"' not found\"\n    );\n\n    if (\n      disputeId == null ||\n      disputeId.trim() === \"\" ||\n      evidenceId == null ||\n      evidenceId.trim() === \"\"\n    ) {\n      return Promise.reject(notFoundError);\n    }\n\n    return this.gateway.http\n      .delete(\n        `${this.config.baseMerchantPath()}/disputes/${disputeId}/evidence/${evidenceId}`\n      )\n      .then(this.createResponseHandler())\n      .catch(this.createRejectionHandler(notFoundError));\n  }\n\n  search(searchFunction, callback) {\n    let search = new DisputeSearch();\n\n    searchFunction(search);\n\n    let response = new PaginatedResponse(this.fetchDisputes.bind(this), {\n      search: search.toHash(),\n    });\n\n    if (callback != null) {\n      return response.all(callback);\n    }\n\n    response.ready();\n\n    return response.stream;\n  }\n\n  fetchDisputes(pageNumber, search, callback) {\n    return this.gateway.http.post(\n      `${this.config.baseMerchantPath()}/disputes/advanced_search?page=${pageNumber}`,\n      { search: search },\n      (err, response) => {\n        if (err) {\n          return callback(err);\n        }\n\n        let totalItems = response.disputes.totalItems;\n        let pageSize = response.disputes.pageSize;\n        let disputes = response.disputes.dispute;\n\n        if (!disputes) {\n          disputes = [null];\n        } else if (!Array.isArray(disputes)) {\n          disputes = [disputes];\n        }\n\n        return callback(null, totalItems, pageSize, disputes);\n      }\n    );\n  }\n\n  createRejectionHandler(notFoundError) {\n    return function (err) {\n      if (err.type === \"notFoundError\") {\n        err = notFoundError;\n      }\n\n      return Promise.reject(err);\n    };\n  }\n}\n\nmodule.exports = {\n  DisputeGateway: wrapPrototype(DisputeGateway, {\n    ignoreMethods: [\"search\", \"fetchDisputes\"],\n  }),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}