{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable new-cap */\nlet Http = require(\"./http\").Http;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass GraphQL extends Http {\n  constructor(config) {\n    super(config);\n  }\n  checkGraphQLErrors(response) {\n    if (!(\"errors\" in response) || !response.errors) {\n      return null;\n    }\n    for (let i = 0; i < response.errors.length; i++) {\n      let error = response.errors[i];\n      let message = error.message;\n      if (!error.extensions) {\n        return exceptions.UnexpectedError(`Unexpected HTTP response: ${message}`);\n      }\n      switch (error.extensions.errorClass) {\n        case \"VALIDATION\":\n          continue;\n        case \"AUTHENTICATION\":\n          return exceptions.AuthenticationError(\"Authentication Error\");\n        case \"AUTHORIZATION\":\n          return exceptions.AuthorizationError(\"Authorization Error\");\n        case \"NOT_FOUND\":\n          return exceptions.NotFoundError(\"Not Found\");\n        case \"UNSUPPORTED_CLIENT\":\n          return exceptions.UpgradeRequired(\"Upgrade Required\");\n        case \"RESOURCE_LIMIT\":\n          return exceptions.TooManyRequestsError(\"Too Many Requests\");\n        case \"INTERNAL\":\n          return exceptions.ServerError(\"Server Error\");\n        case \"SERVICE_AVAILABILITY\":\n          return exceptions.ServiceUnavailableError(\"Service Unavailable\");\n        default:\n          return exceptions.UnexpectedError(`Unexpected HTTP response: ${message}`);\n      }\n    }\n    return null;\n  }\n  headers() {\n    return {\n      Accept: \"application/json\",\n      \"Braintree-Version\": this.config.graphQLApiVersion,\n      \"Content-Type\": \"application/json\"\n    };\n  }\n  request(definition, variables) {\n    let graphQLRequest = {\n      query: definition\n    };\n    if (variables) {\n      graphQLRequest.variables = variables;\n    }\n    return super.httpRequest(\"POST\", this.config.baseGraphQLUrl(), graphQLRequest, null, this.config.environment.graphQLServer, this.config.environment.graphQLPort, this.headers()).then(response => {\n      const error = this.checkGraphQLErrors(response);\n      if (error) {\n        return Promise.reject(error);\n      }\n      return Promise.resolve(response);\n    });\n  }\n}\nmodule.exports = {\n  GraphQL: wrapPrototype(GraphQL)\n};","map":{"version":3,"names":["Http","require","exceptions","wrapPrototype","GraphQL","constructor","config","checkGraphQLErrors","response","errors","i","length","error","message","extensions","UnexpectedError","errorClass","AuthenticationError","AuthorizationError","NotFoundError","UpgradeRequired","TooManyRequestsError","ServerError","ServiceUnavailableError","headers","Accept","graphQLApiVersion","request","definition","variables","graphQLRequest","query","httpRequest","baseGraphQLUrl","environment","graphQLServer","graphQLPort","then","Promise","reject","resolve","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/graphql.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable new-cap */\n\nlet Http = require(\"./http\").Http;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass GraphQL extends Http {\n  constructor(config) {\n    super(config);\n  }\n\n  checkGraphQLErrors(response) {\n    if (!(\"errors\" in response) || !response.errors) {\n      return null;\n    }\n\n    for (let i = 0; i < response.errors.length; i++) {\n      let error = response.errors[i];\n      let message = error.message;\n\n      if (!error.extensions) {\n        return exceptions.UnexpectedError(\n          `Unexpected HTTP response: ${message}`\n        );\n      }\n\n      switch (error.extensions.errorClass) {\n        case \"VALIDATION\":\n          continue;\n        case \"AUTHENTICATION\":\n          return exceptions.AuthenticationError(\"Authentication Error\");\n        case \"AUTHORIZATION\":\n          return exceptions.AuthorizationError(\"Authorization Error\");\n        case \"NOT_FOUND\":\n          return exceptions.NotFoundError(\"Not Found\");\n        case \"UNSUPPORTED_CLIENT\":\n          return exceptions.UpgradeRequired(\"Upgrade Required\");\n        case \"RESOURCE_LIMIT\":\n          return exceptions.TooManyRequestsError(\"Too Many Requests\");\n        case \"INTERNAL\":\n          return exceptions.ServerError(\"Server Error\");\n        case \"SERVICE_AVAILABILITY\":\n          return exceptions.ServiceUnavailableError(\"Service Unavailable\");\n        default:\n          return exceptions.UnexpectedError(\n            `Unexpected HTTP response: ${message}`\n          );\n      }\n    }\n\n    return null;\n  }\n\n  headers() {\n    return {\n      Accept: \"application/json\",\n      \"Braintree-Version\": this.config.graphQLApiVersion,\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  request(definition, variables) {\n    let graphQLRequest = { query: definition };\n\n    if (variables) {\n      graphQLRequest.variables = variables;\n    }\n\n    return super\n      .httpRequest(\n        \"POST\",\n        this.config.baseGraphQLUrl(),\n        graphQLRequest,\n        null,\n        this.config.environment.graphQLServer,\n        this.config.environment.graphQLPort,\n        this.headers()\n      )\n      .then((response) => {\n        const error = this.checkGraphQLErrors(response);\n\n        if (error) {\n          return Promise.reject(error);\n        }\n\n        return Promise.resolve(response);\n      });\n  }\n}\n\nmodule.exports = { GraphQL: wrapPrototype(GraphQL) };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}