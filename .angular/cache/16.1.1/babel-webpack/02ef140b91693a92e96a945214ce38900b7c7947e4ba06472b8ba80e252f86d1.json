{"ast":null,"code":"\"use strict\";\n\nlet DocumentUpload = require(\"./document_upload\").DocumentUpload;\nlet Gateway = require(\"./gateway\").Gateway;\nlet InvalidKeysError = require(\"./exceptions\").InvalidKeysError;\nlet Readable = require(\"stream\").Readable;\nlet Util = require(\"./util\").Util;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass DocumentUploadGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  create(options) {\n    if (!options.file || !(options.file instanceof Readable)) {\n      return Promise.reject(new InvalidKeysError(\"file must be a Readable stream\"));\n    }\n    let params = {\n      file: {\n        path: options.file.path\n      },\n      kind: options.kind\n    };\n    let invalidKeysError = Util.verifyKeys(this._createSignature(), params);\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n    return this.gateway.http.postMultipart(`${this.config.baseMerchantPath()}/document_uploads`, {\n      \"document_upload[kind]\": params.kind\n    }, params.file).then(this.createResponseHandler(\"documentUpload\", DocumentUpload));\n  }\n  _createSignature() {\n    return {\n      valid: [\"kind\", \"file[path]\"]\n    };\n  }\n}\nmodule.exports = {\n  DocumentUploadGateway: wrapPrototype(DocumentUploadGateway)\n};","map":{"version":3,"names":["DocumentUpload","require","Gateway","InvalidKeysError","Readable","Util","wrapPrototype","DocumentUploadGateway","constructor","gateway","config","create","options","file","Promise","reject","params","path","kind","invalidKeysError","verifyKeys","_createSignature","http","postMultipart","baseMerchantPath","then","createResponseHandler","valid","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/document_upload_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet DocumentUpload = require(\"./document_upload\").DocumentUpload;\nlet Gateway = require(\"./gateway\").Gateway;\nlet InvalidKeysError = require(\"./exceptions\").InvalidKeysError;\nlet Readable = require(\"stream\").Readable;\nlet Util = require(\"./util\").Util;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass DocumentUploadGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(options) {\n    if (!options.file || !(options.file instanceof Readable)) {\n      return Promise.reject(\n        new InvalidKeysError(\"file must be a Readable stream\")\n      );\n    }\n\n    let params = {\n      file: {\n        path: options.file.path,\n      },\n      kind: options.kind,\n    };\n    let invalidKeysError = Util.verifyKeys(this._createSignature(), params);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n\n    return this.gateway.http\n      .postMultipart(\n        `${this.config.baseMerchantPath()}/document_uploads`,\n        {\n          \"document_upload[kind]\": params.kind,\n        },\n        params.file\n      )\n      .then(this.createResponseHandler(\"documentUpload\", DocumentUpload));\n  }\n\n  _createSignature() {\n    return {\n      valid: [\"kind\", \"file[path]\"],\n    };\n  }\n}\n\nmodule.exports = {\n  DocumentUploadGateway: wrapPrototype(DocumentUploadGateway),\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC,CAACD,cAAc;AAChE,IAAIE,OAAO,GAAGD,OAAO,CAAC,WAAW,CAAC,CAACC,OAAO;AAC1C,IAAIC,gBAAgB,GAAGF,OAAO,CAAC,cAAc,CAAC,CAACE,gBAAgB;AAC/D,IAAIC,QAAQ,GAAGH,OAAO,CAAC,QAAQ,CAAC,CAACG,QAAQ;AACzC,IAAIC,IAAI,GAAGJ,OAAO,CAAC,QAAQ,CAAC,CAACI,IAAI;AACjC,IAAIC,aAAa,GAAGL,OAAO,CAAC,yBAAyB,CAAC,CAACK,aAAa;AAEpE,MAAMC,qBAAqB,SAASL,OAAO,CAAC;EAC1CM,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,OAAO,CAACC,MAAM;EACnC;EAEAC,MAAMA,CAACC,OAAO,EAAE;IACd,IAAI,CAACA,OAAO,CAACC,IAAI,IAAI,EAAED,OAAO,CAACC,IAAI,YAAYT,QAAQ,CAAC,EAAE;MACxD,OAAOU,OAAO,CAACC,MAAM,CACnB,IAAIZ,gBAAgB,CAAC,gCAAgC,CACvD,CAAC;IACH;IAEA,IAAIa,MAAM,GAAG;MACXH,IAAI,EAAE;QACJI,IAAI,EAAEL,OAAO,CAACC,IAAI,CAACI;MACrB,CAAC;MACDC,IAAI,EAAEN,OAAO,CAACM;IAChB,CAAC;IACD,IAAIC,gBAAgB,GAAGd,IAAI,CAACe,UAAU,CAAC,IAAI,CAACC,gBAAgB,CAAC,CAAC,EAAEL,MAAM,CAAC;IAEvE,IAAIG,gBAAgB,EAAE;MACpB,OAAOL,OAAO,CAACC,MAAM,CAACI,gBAAgB,CAAC;IACzC;IAEA,OAAO,IAAI,CAACV,OAAO,CAACa,IAAI,CACrBC,aAAa,CACX,GAAE,IAAI,CAACb,MAAM,CAACc,gBAAgB,CAAC,CAAE,mBAAkB,EACpD;MACE,uBAAuB,EAAER,MAAM,CAACE;IAClC,CAAC,EACDF,MAAM,CAACH,IACT,CAAC,CACAY,IAAI,CAAC,IAAI,CAACC,qBAAqB,CAAC,gBAAgB,EAAE1B,cAAc,CAAC,CAAC;EACvE;EAEAqB,gBAAgBA,CAAA,EAAG;IACjB,OAAO;MACLM,KAAK,EAAE,CAAC,MAAM,EAAE,YAAY;IAC9B,CAAC;EACH;AACF;AAEAC,MAAM,CAACC,OAAO,GAAG;EACftB,qBAAqB,EAAED,aAAa,CAACC,qBAAqB;AAC5D,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}