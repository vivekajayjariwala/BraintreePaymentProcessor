{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Address = require(\"./address\").Address;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass AddressGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  create(attributes) {\n    let customerId = attributes.customerId;\n    delete attributes.customerId;\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses`, {\n      address: attributes\n    }).then(this.responseHandler());\n  }\n  delete(customerId, id) {\n    let path = `${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`;\n    return this.gateway.http.delete(path);\n  }\n  find(customerId, id) {\n    if (customerId.trim() === \"\" || id.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\")); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`).then(response => {\n      return response.address;\n    });\n  }\n  update(customerId, id, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`, {\n      address: attributes\n    }).then(this.responseHandler());\n  }\n  responseHandler() {\n    return this.createResponseHandler(\"address\", Address);\n  }\n  sharedSignature(prefix) {\n    let signatureKeys = [\"company\", \"countryCodeAlpha2\", \"countryCodeAlpha3\", \"countryCodeNumeric\", \"countryName\", \"extendedAddress\", \"firstName\", \"lastName\", \"locality\", \"phoneNumber\", \"postalCode\", \"region\", \"streetAddress\"];\n    let signature = [];\n    for (let val of signatureKeys) {\n      signature.push(prefix + \"[\" + val + \"]\");\n    }\n    return signature;\n  }\n}\nmodule.exports = {\n  AddressGateway: wrapPrototype(AddressGateway)\n};","map":{"version":3,"names":["Gateway","require","Address","exceptions","wrapPrototype","AddressGateway","constructor","gateway","config","create","attributes","customerId","http","post","baseMerchantPath","address","then","responseHandler","delete","id","path","find","trim","Promise","reject","NotFoundError","get","response","update","put","createResponseHandler","sharedSignature","prefix","signatureKeys","signature","val","push","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/address_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Address = require(\"./address\").Address;\nlet exceptions = require(\"./exceptions\");\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass AddressGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    let customerId = attributes.customerId;\n\n    delete attributes.customerId;\n\n    return this.gateway.http\n      .post(\n        `${this.config.baseMerchantPath()}/customers/${customerId}/addresses`,\n        { address: attributes }\n      )\n      .then(this.responseHandler());\n  }\n\n  delete(customerId, id) {\n    let path = `${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`;\n\n    return this.gateway.http.delete(path);\n  }\n\n  find(customerId, id) {\n    if (customerId.trim() === \"\" || id.trim() === \"\") {\n      return Promise.reject(exceptions.NotFoundError(\"Not Found\")); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http\n      .get(\n        `${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`\n      )\n      .then((response) => {\n        return response.address;\n      });\n  }\n\n  update(customerId, id, attributes) {\n    return this.gateway.http\n      .put(\n        `${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`,\n        { address: attributes }\n      )\n      .then(this.responseHandler());\n  }\n\n  responseHandler() {\n    return this.createResponseHandler(\"address\", Address);\n  }\n\n  sharedSignature(prefix) {\n    let signatureKeys = [\n      \"company\",\n      \"countryCodeAlpha2\",\n      \"countryCodeAlpha3\",\n      \"countryCodeNumeric\",\n      \"countryName\",\n      \"extendedAddress\",\n      \"firstName\",\n      \"lastName\",\n      \"locality\",\n      \"phoneNumber\",\n      \"postalCode\",\n      \"region\",\n      \"streetAddress\",\n    ];\n\n    let signature = [];\n\n    for (let val of signatureKeys) {\n      signature.push(prefix + \"[\" + val + \"]\");\n    }\n\n    return signature;\n  }\n}\n\nmodule.exports = { AddressGateway: wrapPrototype(AddressGateway) };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}