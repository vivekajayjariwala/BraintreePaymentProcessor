{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nlet GraphQLClient = require(\"./graphql_client\").GraphQLClient;\nlet Util = require(\"./util\").Util;\nlet ExchangeRateQuotePayload = require(\"./exchange_rate_quote_payload\").ExchangeRateQuotePayload;\nclass ExchangeRateQuoteGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  generate(attributes) {\n    let invalidKeysError = Util.verifyKeys(this._generateSignature(), attributes);\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError, null);\n    }\n    const exchangeRateQuoteMutation = `mutation ($exchangeRateQuoteRequest: GenerateExchangeRateQuoteInput!) {\n        generateExchangeRateQuote(input: $exchangeRateQuoteRequest) {\n          quotes {\n            id\n            baseAmount {value, currencyCode}\n            quoteAmount {value, currencyCode}\n            exchangeRate\n            tradeRate\n            expiresAt\n            refreshesAt\n          }\n        }\n      }`;\n    let graphQLClient = new GraphQLClient(this.config);\n    let exchangeRateQuoteRequest = {\n      exchangeRateQuoteRequest: attributes\n    };\n    return graphQLClient.query(exchangeRateQuoteMutation, exchangeRateQuoteRequest).then(response => {\n      if (response && !response.errors) {\n        response.success = true;\n        response.exchangeRateQuotePayload = new ExchangeRateQuotePayload(response.data.generateExchangeRateQuote);\n      }\n      return response;\n    });\n  }\n  _generateSignature() {\n    let validKeys = [\"quotes[baseCurrency]\", \"quotes[quoteCurrency]\", \"quotes[baseAmount]\", \"quotes[markup]\"];\n    return {\n      valid: validKeys\n    };\n  }\n}\nmodule.exports = {\n  ExchangeRateQuoteGateway: wrapPrototype(ExchangeRateQuoteGateway)\n};","map":{"version":3,"names":["Gateway","require","wrapPrototype","GraphQLClient","Util","ExchangeRateQuotePayload","ExchangeRateQuoteGateway","constructor","gateway","config","generate","attributes","invalidKeysError","verifyKeys","_generateSignature","Promise","reject","exchangeRateQuoteMutation","graphQLClient","exchangeRateQuoteRequest","query","then","response","errors","success","exchangeRateQuotePayload","data","generateExchangeRateQuote","validKeys","valid","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/exchange_rate_quote_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nlet GraphQLClient = require(\"./graphql_client\").GraphQLClient;\nlet Util = require(\"./util\").Util;\nlet ExchangeRateQuotePayload =\n  require(\"./exchange_rate_quote_payload\").ExchangeRateQuotePayload;\n\nclass ExchangeRateQuoteGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  generate(attributes) {\n    let invalidKeysError = Util.verifyKeys(\n      this._generateSignature(),\n      attributes\n    );\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError, null);\n    }\n\n    const exchangeRateQuoteMutation = `mutation ($exchangeRateQuoteRequest: GenerateExchangeRateQuoteInput!) {\n        generateExchangeRateQuote(input: $exchangeRateQuoteRequest) {\n          quotes {\n            id\n            baseAmount {value, currencyCode}\n            quoteAmount {value, currencyCode}\n            exchangeRate\n            tradeRate\n            expiresAt\n            refreshesAt\n          }\n        }\n      }`;\n\n    let graphQLClient = new GraphQLClient(this.config);\n    let exchangeRateQuoteRequest = { exchangeRateQuoteRequest: attributes };\n\n    return graphQLClient\n      .query(exchangeRateQuoteMutation, exchangeRateQuoteRequest)\n      .then((response) => {\n        if (response && !response.errors) {\n          response.success = true;\n          response.exchangeRateQuotePayload = new ExchangeRateQuotePayload(\n            response.data.generateExchangeRateQuote\n          );\n        }\n\n        return response;\n      });\n  }\n\n  _generateSignature() {\n    let validKeys = [\n      \"quotes[baseCurrency]\",\n      \"quotes[quoteCurrency]\",\n      \"quotes[baseAmount]\",\n      \"quotes[markup]\",\n    ];\n\n    return {\n      valid: validKeys,\n    };\n  }\n}\n\nmodule.exports = {\n  ExchangeRateQuoteGateway: wrapPrototype(ExchangeRateQuoteGateway),\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC,CAACD,OAAO;AAC1C,IAAIE,aAAa,GAAGD,OAAO,CAAC,yBAAyB,CAAC,CAACC,aAAa;AACpE,IAAIC,aAAa,GAAGF,OAAO,CAAC,kBAAkB,CAAC,CAACE,aAAa;AAC7D,IAAIC,IAAI,GAAGH,OAAO,CAAC,QAAQ,CAAC,CAACG,IAAI;AACjC,IAAIC,wBAAwB,GAC1BJ,OAAO,CAAC,+BAA+B,CAAC,CAACI,wBAAwB;AAEnE,MAAMC,wBAAwB,SAASN,OAAO,CAAC;EAC7CO,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,OAAO,CAACC,MAAM;EACnC;EAEAC,QAAQA,CAACC,UAAU,EAAE;IACnB,IAAIC,gBAAgB,GAAGR,IAAI,CAACS,UAAU,CACpC,IAAI,CAACC,kBAAkB,CAAC,CAAC,EACzBH,UACF,CAAC;IAED,IAAIC,gBAAgB,EAAE;MACpB,OAAOG,OAAO,CAACC,MAAM,CAACJ,gBAAgB,EAAE,IAAI,CAAC;IAC/C;IAEA,MAAMK,yBAAyB,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;IAEJ,IAAIC,aAAa,GAAG,IAAIf,aAAa,CAAC,IAAI,CAACM,MAAM,CAAC;IAClD,IAAIU,wBAAwB,GAAG;MAAEA,wBAAwB,EAAER;IAAW,CAAC;IAEvE,OAAOO,aAAa,CACjBE,KAAK,CAACH,yBAAyB,EAAEE,wBAAwB,CAAC,CAC1DE,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,IAAI,CAACA,QAAQ,CAACC,MAAM,EAAE;QAChCD,QAAQ,CAACE,OAAO,GAAG,IAAI;QACvBF,QAAQ,CAACG,wBAAwB,GAAG,IAAIpB,wBAAwB,CAC9DiB,QAAQ,CAACI,IAAI,CAACC,yBAChB,CAAC;MACH;MAEA,OAAOL,QAAQ;IACjB,CAAC,CAAC;EACN;EAEAR,kBAAkBA,CAAA,EAAG;IACnB,IAAIc,SAAS,GAAG,CACd,sBAAsB,EACtB,uBAAuB,EACvB,oBAAoB,EACpB,gBAAgB,CACjB;IAED,OAAO;MACLC,KAAK,EAAED;IACT,CAAC;EACH;AACF;AAEAE,MAAM,CAACC,OAAO,GAAG;EACfzB,wBAAwB,EAAEJ,aAAa,CAACI,wBAAwB;AAClE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}