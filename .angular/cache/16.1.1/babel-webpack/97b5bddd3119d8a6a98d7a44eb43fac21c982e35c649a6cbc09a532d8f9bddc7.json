{"ast":null,"code":"\"use strict\";\n\nlet Environment = require(\"./environment\").Environment;\nclass CredentialsParser {\n  parseClientCredentials(clientId, clientSecret) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    if (!this.clientId) {\n      throw new Error(\"Missing clientId\");\n    }\n    if (!this.clientSecret) {\n      throw new Error(\"Missing clientSecret\");\n    }\n    if (this.clientId.indexOf(\"client_id\") !== 0) {\n      throw new Error(\"Value passed for clientId is not a client id\");\n    }\n    if (this.clientSecret.indexOf(\"client_secret\") !== 0) {\n      throw new Error(\"Value passed for clientSecret is not a client secret\");\n    }\n    let clientIdEnvironment = this.parseEnvironment(this.clientId);\n    let clientSecretEnvironment = this.parseEnvironment(this.clientSecret);\n    if (clientIdEnvironment !== clientSecretEnvironment) {\n      throw new Error(`Mismatched credential environments: clientId environment is ${clientIdEnvironment} and clientSecret environment is ${clientSecretEnvironment}`);\n    }\n    this.environment = clientIdEnvironment;\n    return this.environment;\n  }\n  parseAccessToken(accessToken) {\n    this.accessToken = accessToken;\n    if (!this.accessToken) {\n      throw new Error(\"Missing access token\");\n    }\n    if (this.accessToken.indexOf(\"access_token\") !== 0) {\n      throw new Error(\"Value passed for accessToken is not a valid access token\");\n    }\n    this.merchantId = this.accessToken.split(\"$\")[2];\n    this.environment = this.parseEnvironment(this.accessToken);\n    return this.environment;\n  }\n  parseEnvironment(credential) {\n    let env = credential.split(\"$\")[1];\n    switch (env) {\n      case \"development\":\n      case \"integration\":\n        return Environment.Development;\n      case \"qa\":\n        return Environment.Qa;\n      case \"sandbox\":\n        return Environment.Sandbox;\n      case \"production\":\n        return Environment.Production;\n      default:\n        throw new Error(`Unknown environment: ${env}`);\n    }\n  }\n}\nmodule.exports = {\n  CredentialsParser: CredentialsParser\n};","map":{"version":3,"names":["Environment","require","CredentialsParser","parseClientCredentials","clientId","clientSecret","Error","indexOf","clientIdEnvironment","parseEnvironment","clientSecretEnvironment","environment","parseAccessToken","accessToken","merchantId","split","credential","env","Development","Qa","Sandbox","Production","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/credentials_parser.js"],"sourcesContent":["\"use strict\";\n\nlet Environment = require(\"./environment\").Environment;\n\nclass CredentialsParser {\n  parseClientCredentials(clientId, clientSecret) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    if (!this.clientId) {\n      throw new Error(\"Missing clientId\");\n    }\n    if (!this.clientSecret) {\n      throw new Error(\"Missing clientSecret\");\n    }\n\n    if (this.clientId.indexOf(\"client_id\") !== 0) {\n      throw new Error(\"Value passed for clientId is not a client id\");\n    }\n    if (this.clientSecret.indexOf(\"client_secret\") !== 0) {\n      throw new Error(\"Value passed for clientSecret is not a client secret\");\n    }\n\n    let clientIdEnvironment = this.parseEnvironment(this.clientId);\n    let clientSecretEnvironment = this.parseEnvironment(this.clientSecret);\n\n    if (clientIdEnvironment !== clientSecretEnvironment) {\n      throw new Error(\n        `Mismatched credential environments: clientId environment is ${clientIdEnvironment} and clientSecret environment is ${clientSecretEnvironment}`\n      );\n    }\n\n    this.environment = clientIdEnvironment;\n\n    return this.environment;\n  }\n\n  parseAccessToken(accessToken) {\n    this.accessToken = accessToken;\n    if (!this.accessToken) {\n      throw new Error(\"Missing access token\");\n    }\n\n    if (this.accessToken.indexOf(\"access_token\") !== 0) {\n      throw new Error(\n        \"Value passed for accessToken is not a valid access token\"\n      );\n    }\n\n    this.merchantId = this.accessToken.split(\"$\")[2];\n    this.environment = this.parseEnvironment(this.accessToken);\n\n    return this.environment;\n  }\n\n  parseEnvironment(credential) {\n    let env = credential.split(\"$\")[1];\n\n    switch (env) {\n      case \"development\":\n      case \"integration\":\n        return Environment.Development;\n      case \"qa\":\n        return Environment.Qa;\n      case \"sandbox\":\n        return Environment.Sandbox;\n      case \"production\":\n        return Environment.Production;\n      default:\n        throw new Error(`Unknown environment: ${env}`);\n    }\n  }\n}\n\nmodule.exports = { CredentialsParser: CredentialsParser };\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC,CAACD,WAAW;AAEtD,MAAME,iBAAiB,CAAC;EACtBC,sBAAsBA,CAACC,QAAQ,EAAEC,YAAY,EAAE;IAC7C,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAAC,IAAI,CAACD,QAAQ,EAAE;MAClB,MAAM,IAAIE,KAAK,CAAC,kBAAkB,CAAC;IACrC;IACA,IAAI,CAAC,IAAI,CAACD,YAAY,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEA,IAAI,IAAI,CAACF,QAAQ,CAACG,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;MAC5C,MAAM,IAAID,KAAK,CAAC,8CAA8C,CAAC;IACjE;IACA,IAAI,IAAI,CAACD,YAAY,CAACE,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;MACpD,MAAM,IAAID,KAAK,CAAC,sDAAsD,CAAC;IACzE;IAEA,IAAIE,mBAAmB,GAAG,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACL,QAAQ,CAAC;IAC9D,IAAIM,uBAAuB,GAAG,IAAI,CAACD,gBAAgB,CAAC,IAAI,CAACJ,YAAY,CAAC;IAEtE,IAAIG,mBAAmB,KAAKE,uBAAuB,EAAE;MACnD,MAAM,IAAIJ,KAAK,CACZ,+DAA8DE,mBAAoB,oCAAmCE,uBAAwB,EAChJ,CAAC;IACH;IAEA,IAAI,CAACC,WAAW,GAAGH,mBAAmB;IAEtC,OAAO,IAAI,CAACG,WAAW;EACzB;EAEAC,gBAAgBA,CAACC,WAAW,EAAE;IAC5B,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAAC,IAAI,CAACA,WAAW,EAAE;MACrB,MAAM,IAAIP,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEA,IAAI,IAAI,CAACO,WAAW,CAACN,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;MAClD,MAAM,IAAID,KAAK,CACb,0DACF,CAAC;IACH;IAEA,IAAI,CAACQ,UAAU,GAAG,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChD,IAAI,CAACJ,WAAW,GAAG,IAAI,CAACF,gBAAgB,CAAC,IAAI,CAACI,WAAW,CAAC;IAE1D,OAAO,IAAI,CAACF,WAAW;EACzB;EAEAF,gBAAgBA,CAACO,UAAU,EAAE;IAC3B,IAAIC,GAAG,GAAGD,UAAU,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAElC,QAAQE,GAAG;MACT,KAAK,aAAa;MAClB,KAAK,aAAa;QAChB,OAAOjB,WAAW,CAACkB,WAAW;MAChC,KAAK,IAAI;QACP,OAAOlB,WAAW,CAACmB,EAAE;MACvB,KAAK,SAAS;QACZ,OAAOnB,WAAW,CAACoB,OAAO;MAC5B,KAAK,YAAY;QACf,OAAOpB,WAAW,CAACqB,UAAU;MAC/B;QACE,MAAM,IAAIf,KAAK,CAAE,wBAAuBW,GAAI,EAAC,CAAC;IAClD;EACF;AACF;AAEAK,MAAM,CAACC,OAAO,GAAG;EAAErB,iBAAiB,EAAEA;AAAkB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}