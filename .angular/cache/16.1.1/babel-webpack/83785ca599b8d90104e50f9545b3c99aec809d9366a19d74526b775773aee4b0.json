{"ast":null,"code":"\"use strict\";\n\nlet AttributeSetter = require(\"./attribute_setter\").AttributeSetter;\nlet ApplePayCard = require(\"./apple_pay_card\").ApplePayCard;\nlet AndroidPayCard = require(\"./android_pay_card\").AndroidPayCard;\nlet CreditCard = require(\"./credit_card\").CreditCard;\nlet PayPalAccount = require(\"./paypal_account\").PayPalAccount;\nlet VenmoAccount = require(\"./venmo_account\").VenmoAccount;\nlet SepaDirectDebitAccount = require(\"./sepa_direct_debit_account\").SepaDirectDebitAccount;\nlet UsBankAccount = require(\"./us_bank_account\").UsBankAccount;\nclass Customer extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n    this.paymentMethods = [];\n    if (attributes.creditCards) {\n      this.creditCards = attributes.creditCards.map(cardAttributes => new CreditCard(cardAttributes));\n      this._addPaymentMethods(this.creditCards);\n    }\n    if (attributes.applePayCards) {\n      this.applePayCards = attributes.applePayCards.map(cardAttributes => new ApplePayCard(cardAttributes));\n      this._addPaymentMethods(this.applePayCards);\n    }\n\n    // NEXT_MAJOR_VERSION rename Android Pay to Google Pay\n    if (attributes.androidPayCards) {\n      this.androidPayCards = attributes.androidPayCards.map(cardAttributes => new AndroidPayCard(cardAttributes));\n      this._addPaymentMethods(this.androidPayCards);\n    }\n    if (attributes.paypalAccounts) {\n      this.paypalAccounts = attributes.paypalAccounts.map(paypalAccountAttributes => new PayPalAccount(paypalAccountAttributes));\n      this._addPaymentMethods(this.paypalAccounts);\n    }\n    if (attributes.sepaDebitAccounts) {\n      this.sepaDirectDebitAccounts = attributes.sepaDebitAccounts.map(sepaDebitAccountAttributes => new SepaDirectDebitAccount(sepaDebitAccountAttributes));\n      this._addPaymentMethods(this.sepaDirectDebitAccounts);\n    }\n    if (attributes.venmoAccounts) {\n      this.venmoAccounts = attributes.venmoAccounts.map(venmoAccountAttributes => new VenmoAccount(venmoAccountAttributes));\n      this._addPaymentMethods(this.venmoAccounts);\n    }\n    if (attributes.usBankAccounts) {\n      this.usBankAccounts = attributes.usBankAccounts.map(usBankAccountAttributes => new UsBankAccount(usBankAccountAttributes));\n      this._addPaymentMethods(this.usBankAccounts);\n    }\n  }\n  _addPaymentMethods(paymentMethods) {\n    return paymentMethods.map(paymentMethod => this.paymentMethods.push(paymentMethod));\n  }\n}\nmodule.exports = {\n  Customer: Customer\n};","map":{"version":3,"names":["AttributeSetter","require","ApplePayCard","AndroidPayCard","CreditCard","PayPalAccount","VenmoAccount","SepaDirectDebitAccount","UsBankAccount","Customer","constructor","attributes","paymentMethods","creditCards","map","cardAttributes","_addPaymentMethods","applePayCards","androidPayCards","paypalAccounts","paypalAccountAttributes","sepaDebitAccounts","sepaDirectDebitAccounts","sepaDebitAccountAttributes","venmoAccounts","venmoAccountAttributes","usBankAccounts","usBankAccountAttributes","paymentMethod","push","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/customer.js"],"sourcesContent":["\"use strict\";\n\nlet AttributeSetter = require(\"./attribute_setter\").AttributeSetter;\nlet ApplePayCard = require(\"./apple_pay_card\").ApplePayCard;\nlet AndroidPayCard = require(\"./android_pay_card\").AndroidPayCard;\nlet CreditCard = require(\"./credit_card\").CreditCard;\nlet PayPalAccount = require(\"./paypal_account\").PayPalAccount;\nlet VenmoAccount = require(\"./venmo_account\").VenmoAccount;\nlet SepaDirectDebitAccount =\n  require(\"./sepa_direct_debit_account\").SepaDirectDebitAccount;\nlet UsBankAccount = require(\"./us_bank_account\").UsBankAccount;\n\nclass Customer extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n    this.paymentMethods = [];\n\n    if (attributes.creditCards) {\n      this.creditCards = attributes.creditCards.map(\n        (cardAttributes) => new CreditCard(cardAttributes)\n      );\n      this._addPaymentMethods(this.creditCards);\n    }\n\n    if (attributes.applePayCards) {\n      this.applePayCards = attributes.applePayCards.map(\n        (cardAttributes) => new ApplePayCard(cardAttributes)\n      );\n      this._addPaymentMethods(this.applePayCards);\n    }\n\n    // NEXT_MAJOR_VERSION rename Android Pay to Google Pay\n    if (attributes.androidPayCards) {\n      this.androidPayCards = attributes.androidPayCards.map(\n        (cardAttributes) => new AndroidPayCard(cardAttributes)\n      );\n      this._addPaymentMethods(this.androidPayCards);\n    }\n\n    if (attributes.paypalAccounts) {\n      this.paypalAccounts = attributes.paypalAccounts.map(\n        (paypalAccountAttributes) => new PayPalAccount(paypalAccountAttributes)\n      );\n      this._addPaymentMethods(this.paypalAccounts);\n    }\n\n    if (attributes.sepaDebitAccounts) {\n      this.sepaDirectDebitAccounts = attributes.sepaDebitAccounts.map(\n        (sepaDebitAccountAttributes) =>\n          new SepaDirectDebitAccount(sepaDebitAccountAttributes)\n      );\n      this._addPaymentMethods(this.sepaDirectDebitAccounts);\n    }\n\n    if (attributes.venmoAccounts) {\n      this.venmoAccounts = attributes.venmoAccounts.map(\n        (venmoAccountAttributes) => new VenmoAccount(venmoAccountAttributes)\n      );\n      this._addPaymentMethods(this.venmoAccounts);\n    }\n\n    if (attributes.usBankAccounts) {\n      this.usBankAccounts = attributes.usBankAccounts.map(\n        (usBankAccountAttributes) => new UsBankAccount(usBankAccountAttributes)\n      );\n      this._addPaymentMethods(this.usBankAccounts);\n    }\n  }\n\n  _addPaymentMethods(paymentMethods) {\n    return paymentMethods.map((paymentMethod) =>\n      this.paymentMethods.push(paymentMethod)\n    );\n  }\n}\n\nmodule.exports = { Customer: Customer };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}