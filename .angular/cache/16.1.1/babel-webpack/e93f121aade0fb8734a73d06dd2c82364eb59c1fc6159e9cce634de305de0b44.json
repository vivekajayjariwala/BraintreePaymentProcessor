{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet OAuthCredentials = require(\"./oauth_credentials\").OAuthCredentials;\nlet AttributeSetter = require(\"./attribute_setter\").AttributeSetter;\nlet Util = require(\"./util\").Util;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass OAuthGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  createTokenFromCode(attributes) {\n    attributes.grantType = \"authorization_code\";\n    return this.gateway.http.post(\"/oauth/access_tokens\", attributes).then(this.responseHandler());\n  }\n  createTokenFromRefreshToken(attributes) {\n    attributes.grantType = \"refresh_token\";\n    return this.gateway.http.post(\"/oauth/access_tokens\", attributes).then(this.responseHandler());\n  }\n  revokeAccessToken(accessToken) {\n    return this.gateway.http.post(\"/oauth/revoke_access_token\", {\n      token: accessToken\n    }).then(this.createResponseHandler(\"result\", AttributeSetter));\n  }\n  responseHandler() {\n    return this.createResponseHandler(\"credentials\", OAuthCredentials);\n  }\n  connectUrl(rawParams) {\n    const params = Object.assign({\n      clientId: this.config.clientId\n    }, rawParams);\n    return this.config.baseUrl() + \"/oauth/connect?\" + this.buildQuery(params);\n  }\n  buildQuery(params) {\n    params = Util.convertObjectKeysToUnderscores(params);\n    let paramsArray = this.buildSubQuery(\"user\", params.user);\n    paramsArray.push.apply(paramsArray, this.buildSubQuery(\"business\", params.business));\n    paramsArray.push.apply(paramsArray, this.buildSubArrayQuery(\"payment_methods\", params.payment_methods));\n    delete params.user;\n    delete params.business;\n    delete params.payment_methods;\n    paramsArray.push.apply(paramsArray, (() => {\n      let result = [];\n      for (let key in params) {\n        if (!params.hasOwnProperty(key)) {\n          continue;\n        }\n        let val = params[key];\n        result.push([key, val]);\n      }\n      return result;\n    })());\n    let queryStringParts = paramsArray.map(paramParts => {\n      let key = paramParts[0];\n      let value = paramParts[1];\n      return `${this._encodeValue(key)}=${this._encodeValue(value)}`;\n    });\n    return queryStringParts.join(\"&\");\n  }\n  buildSubQuery(key, subParams) {\n    let arr = [];\n    for (let subKey in subParams) {\n      if (!subParams.hasOwnProperty(subKey)) {\n        continue;\n      }\n      let value = subParams[subKey];\n      arr.push([`${key}[${subKey}]`, value]);\n    }\n    return arr;\n  }\n  _encodeValue(value) {\n    return encodeURIComponent(value).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");\n  }\n  buildSubArrayQuery(key, values) {\n    return (values || []).map(value => [`${key}[]`, value]);\n  }\n}\nmodule.exports = {\n  OAuthGateway: wrapPrototype(OAuthGateway)\n};","map":{"version":3,"names":["Gateway","require","OAuthCredentials","AttributeSetter","Util","wrapPrototype","OAuthGateway","constructor","gateway","config","createTokenFromCode","attributes","grantType","http","post","then","responseHandler","createTokenFromRefreshToken","revokeAccessToken","accessToken","token","createResponseHandler","connectUrl","rawParams","params","Object","assign","clientId","baseUrl","buildQuery","convertObjectKeysToUnderscores","paramsArray","buildSubQuery","user","push","apply","business","buildSubArrayQuery","payment_methods","result","key","hasOwnProperty","val","queryStringParts","map","paramParts","value","_encodeValue","join","subParams","arr","subKey","encodeURIComponent","replace","escape","values","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/oauth_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet OAuthCredentials = require(\"./oauth_credentials\").OAuthCredentials;\nlet AttributeSetter = require(\"./attribute_setter\").AttributeSetter;\nlet Util = require(\"./util\").Util;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass OAuthGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  createTokenFromCode(attributes) {\n    attributes.grantType = \"authorization_code\";\n\n    return this.gateway.http\n      .post(\"/oauth/access_tokens\", attributes)\n      .then(this.responseHandler());\n  }\n\n  createTokenFromRefreshToken(attributes) {\n    attributes.grantType = \"refresh_token\";\n\n    return this.gateway.http\n      .post(\"/oauth/access_tokens\", attributes)\n      .then(this.responseHandler());\n  }\n\n  revokeAccessToken(accessToken) {\n    return this.gateway.http\n      .post(\"/oauth/revoke_access_token\", { token: accessToken })\n      .then(this.createResponseHandler(\"result\", AttributeSetter));\n  }\n\n  responseHandler() {\n    return this.createResponseHandler(\"credentials\", OAuthCredentials);\n  }\n\n  connectUrl(rawParams) {\n    const params = Object.assign({ clientId: this.config.clientId }, rawParams);\n\n    return this.config.baseUrl() + \"/oauth/connect?\" + this.buildQuery(params);\n  }\n\n  buildQuery(params) {\n    params = Util.convertObjectKeysToUnderscores(params);\n\n    let paramsArray = this.buildSubQuery(\"user\", params.user);\n\n    paramsArray.push.apply(\n      paramsArray,\n      this.buildSubQuery(\"business\", params.business)\n    );\n    paramsArray.push.apply(\n      paramsArray,\n      this.buildSubArrayQuery(\"payment_methods\", params.payment_methods)\n    );\n    delete params.user;\n    delete params.business;\n    delete params.payment_methods;\n\n    paramsArray.push.apply(\n      paramsArray,\n      (() => {\n        let result = [];\n\n        for (let key in params) {\n          if (!params.hasOwnProperty(key)) {\n            continue;\n          }\n          let val = params[key];\n\n          result.push([key, val]);\n        }\n\n        return result;\n      })()\n    );\n\n    let queryStringParts = paramsArray.map((paramParts) => {\n      let key = paramParts[0];\n      let value = paramParts[1];\n\n      return `${this._encodeValue(key)}=${this._encodeValue(value)}`;\n    });\n\n    return queryStringParts.join(\"&\");\n  }\n\n  buildSubQuery(key, subParams) {\n    let arr = [];\n\n    for (let subKey in subParams) {\n      if (!subParams.hasOwnProperty(subKey)) {\n        continue;\n      }\n      let value = subParams[subKey];\n\n      arr.push([`${key}[${subKey}]`, value]);\n    }\n\n    return arr;\n  }\n\n  _encodeValue(value) {\n    return encodeURIComponent(value)\n      .replace(/[!'()]/g, escape)\n      .replace(/\\*/g, \"%2A\");\n  }\n\n  buildSubArrayQuery(key, values) {\n    return (values || []).map((value) => [`${key}[]`, value]);\n  }\n}\n\nmodule.exports = { OAuthGateway: wrapPrototype(OAuthGateway) };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}