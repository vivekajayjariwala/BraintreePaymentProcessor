{"ast":null,"code":"\"use strict\";\n\nlet Discount = require(\"./discount\").Discount;\nlet Gateway = require(\"./gateway\").Gateway;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass DiscountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  all() {\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/discounts`).then(this.createResponseHandler(\"discount\", Discount)).then(response => {\n      if (!response.success) {\n        return response;\n      }\n\n      // NEXT_MAJOR_VERSION all the other server sdks return the collection directly, rather\n      // than a response object. For now, add the discounts and success properties to the collection\n      // for backwards compatibility. We can drop these at the next major version.\n      const collection = response.discounts;\n      collection.success = response.success;\n      collection.discounts = response.discounts;\n      return collection;\n    });\n  }\n}\nmodule.exports = {\n  DiscountGateway: wrapPrototype(DiscountGateway)\n};","map":{"version":3,"names":["Discount","require","Gateway","wrapPrototype","DiscountGateway","constructor","gateway","config","all","http","get","baseMerchantPath","then","createResponseHandler","response","success","collection","discounts","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/discount_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Discount = require(\"./discount\").Discount;\nlet Gateway = require(\"./gateway\").Gateway;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass DiscountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  all() {\n    return this.gateway.http\n      .get(`${this.config.baseMerchantPath()}/discounts`)\n      .then(this.createResponseHandler(\"discount\", Discount))\n      .then((response) => {\n        if (!response.success) {\n          return response;\n        }\n\n        // NEXT_MAJOR_VERSION all the other server sdks return the collection directly, rather\n        // than a response object. For now, add the discounts and success properties to the collection\n        // for backwards compatibility. We can drop these at the next major version.\n        const collection = response.discounts;\n\n        collection.success = response.success;\n        collection.discounts = response.discounts;\n\n        return collection;\n      });\n  }\n}\n\nmodule.exports = { DiscountGateway: wrapPrototype(DiscountGateway) };\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAY,CAAC,CAACD,QAAQ;AAC7C,IAAIE,OAAO,GAAGD,OAAO,CAAC,WAAW,CAAC,CAACC,OAAO;AAC1C,IAAIC,aAAa,GAAGF,OAAO,CAAC,yBAAyB,CAAC,CAACE,aAAa;AAEpE,MAAMC,eAAe,SAASF,OAAO,CAAC;EACpCG,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,OAAO,CAACC,MAAM;EACnC;EAEAC,GAAGA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACF,OAAO,CAACG,IAAI,CACrBC,GAAG,CAAE,GAAE,IAAI,CAACH,MAAM,CAACI,gBAAgB,CAAC,CAAE,YAAW,CAAC,CAClDC,IAAI,CAAC,IAAI,CAACC,qBAAqB,CAAC,UAAU,EAAEb,QAAQ,CAAC,CAAC,CACtDY,IAAI,CAAEE,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,OAAO,EAAE;QACrB,OAAOD,QAAQ;MACjB;;MAEA;MACA;MACA;MACA,MAAME,UAAU,GAAGF,QAAQ,CAACG,SAAS;MAErCD,UAAU,CAACD,OAAO,GAAGD,QAAQ,CAACC,OAAO;MACrCC,UAAU,CAACC,SAAS,GAAGH,QAAQ,CAACG,SAAS;MAEzC,OAAOD,UAAU;IACnB,CAAC,CAAC;EACN;AACF;AAEAE,MAAM,CAACC,OAAO,GAAG;EAAEf,eAAe,EAAED,aAAa,CAACC,eAAe;AAAE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}