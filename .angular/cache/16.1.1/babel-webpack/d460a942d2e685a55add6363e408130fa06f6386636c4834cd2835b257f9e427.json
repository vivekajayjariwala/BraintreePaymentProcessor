{"ast":null,"code":"\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Util = require(\"./util\").Util;\nlet SettlementBatchSummary = require(\"./settlement_batch_summary\").SettlementBatchSummary;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\nclass SettlementBatchSummaryGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n  generate(criteria) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/settlement_batch_summary`, {\n      settlementBatchSummary: criteria\n    }).then(this.responseHandler(criteria));\n  }\n  responseHandler(criteria) {\n    let handler = this.createResponseHandler(\"settlementBatchSummary\", SettlementBatchSummary);\n    return payload => {\n      return handler(payload).then(response => {\n        return this.underscoreCustomField(criteria, response);\n      });\n    };\n  }\n  underscoreCustomField(criteria, response) {\n    /*\n     * The response from the gateway API uses snake_case keys and the\n     * Node SDK automatically transforms the keys to camelCase. This\n     * works for everything except for merchant defined custom fields\n     * as param values. Since these come back in the settlement batch\n     * summary response as keys in the object, the Node SDK\n     * accidentally changes them to camelCase. This function determines\n     * if the custom field passed in by the merchant is snake_case and\n     * if so, transforms the camelCased version back to the version the\n     * merchant originally passed in (snake_case).\n     */\n    if (response.success && \"groupByCustomField\" in criteria) {\n      // if the custom field has no _, then no need to do transformation\n      if (criteria.groupByCustomField.indexOf(\"_\") === -1) {\n        return response;\n      }\n      let camelCustomField = Util.toCamelCase(criteria.groupByCustomField);\n\n      /*\n       * loop through the records to add the merchant provided\n       * snake_case param to the response and remove the camelCase\n       * version that was accidentally applied in the response parsing\n       */\n      for (let record of response.settlementBatchSummary.records) {\n        record[criteria.groupByCustomField] = record[camelCustomField];\n        delete record[camelCustomField];\n      }\n    }\n    return response;\n  }\n}\nmodule.exports = {\n  SettlementBatchSummaryGateway: wrapPrototype(SettlementBatchSummaryGateway)\n};","map":{"version":3,"names":["Gateway","require","Util","SettlementBatchSummary","wrapPrototype","SettlementBatchSummaryGateway","constructor","gateway","config","generate","criteria","http","post","baseMerchantPath","settlementBatchSummary","then","responseHandler","handler","createResponseHandler","payload","response","underscoreCustomField","success","groupByCustomField","indexOf","camelCustomField","toCamelCase","record","records","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/settlement_batch_summary_gateway.js"],"sourcesContent":["\"use strict\";\n\nlet Gateway = require(\"./gateway\").Gateway;\nlet Util = require(\"./util\").Util;\nlet SettlementBatchSummary =\n  require(\"./settlement_batch_summary\").SettlementBatchSummary;\nlet wrapPrototype = require(\"@braintree/wrap-promise\").wrapPrototype;\n\nclass SettlementBatchSummaryGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  generate(criteria) {\n    return this.gateway.http\n      .post(`${this.config.baseMerchantPath()}/settlement_batch_summary`, {\n        settlementBatchSummary: criteria,\n      })\n      .then(this.responseHandler(criteria));\n  }\n\n  responseHandler(criteria) {\n    let handler = this.createResponseHandler(\n      \"settlementBatchSummary\",\n      SettlementBatchSummary\n    );\n\n    return (payload) => {\n      return handler(payload).then((response) => {\n        return this.underscoreCustomField(criteria, response);\n      });\n    };\n  }\n\n  underscoreCustomField(criteria, response) {\n    /*\n     * The response from the gateway API uses snake_case keys and the\n     * Node SDK automatically transforms the keys to camelCase. This\n     * works for everything except for merchant defined custom fields\n     * as param values. Since these come back in the settlement batch\n     * summary response as keys in the object, the Node SDK\n     * accidentally changes them to camelCase. This function determines\n     * if the custom field passed in by the merchant is snake_case and\n     * if so, transforms the camelCased version back to the version the\n     * merchant originally passed in (snake_case).\n     */\n    if (response.success && \"groupByCustomField\" in criteria) {\n      // if the custom field has no _, then no need to do transformation\n      if (criteria.groupByCustomField.indexOf(\"_\") === -1) {\n        return response;\n      }\n\n      let camelCustomField = Util.toCamelCase(criteria.groupByCustomField);\n\n      /*\n       * loop through the records to add the merchant provided\n       * snake_case param to the response and remove the camelCase\n       * version that was accidentally applied in the response parsing\n       */\n      for (let record of response.settlementBatchSummary.records) {\n        record[criteria.groupByCustomField] = record[camelCustomField];\n        delete record[camelCustomField];\n      }\n    }\n\n    return response;\n  }\n}\n\nmodule.exports = {\n  SettlementBatchSummaryGateway: wrapPrototype(SettlementBatchSummaryGateway),\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC,CAACD,OAAO;AAC1C,IAAIE,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAACC,IAAI;AACjC,IAAIC,sBAAsB,GACxBF,OAAO,CAAC,4BAA4B,CAAC,CAACE,sBAAsB;AAC9D,IAAIC,aAAa,GAAGH,OAAO,CAAC,yBAAyB,CAAC,CAACG,aAAa;AAEpE,MAAMC,6BAA6B,SAASL,OAAO,CAAC;EAClDM,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,OAAO,CAACC,MAAM;EACnC;EAEAC,QAAQA,CAACC,QAAQ,EAAE;IACjB,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,CACrBC,IAAI,CAAE,GAAE,IAAI,CAACJ,MAAM,CAACK,gBAAgB,CAAC,CAAE,2BAA0B,EAAE;MAClEC,sBAAsB,EAAEJ;IAC1B,CAAC,CAAC,CACDK,IAAI,CAAC,IAAI,CAACC,eAAe,CAACN,QAAQ,CAAC,CAAC;EACzC;EAEAM,eAAeA,CAACN,QAAQ,EAAE;IACxB,IAAIO,OAAO,GAAG,IAAI,CAACC,qBAAqB,CACtC,wBAAwB,EACxBf,sBACF,CAAC;IAED,OAAQgB,OAAO,IAAK;MAClB,OAAOF,OAAO,CAACE,OAAO,CAAC,CAACJ,IAAI,CAAEK,QAAQ,IAAK;QACzC,OAAO,IAAI,CAACC,qBAAqB,CAACX,QAAQ,EAAEU,QAAQ,CAAC;MACvD,CAAC,CAAC;IACJ,CAAC;EACH;EAEAC,qBAAqBA,CAACX,QAAQ,EAAEU,QAAQ,EAAE;IACxC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAIA,QAAQ,CAACE,OAAO,IAAI,oBAAoB,IAAIZ,QAAQ,EAAE;MACxD;MACA,IAAIA,QAAQ,CAACa,kBAAkB,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;QACnD,OAAOJ,QAAQ;MACjB;MAEA,IAAIK,gBAAgB,GAAGvB,IAAI,CAACwB,WAAW,CAAChB,QAAQ,CAACa,kBAAkB,CAAC;;MAEpE;AACN;AACA;AACA;AACA;MACM,KAAK,IAAII,MAAM,IAAIP,QAAQ,CAACN,sBAAsB,CAACc,OAAO,EAAE;QAC1DD,MAAM,CAACjB,QAAQ,CAACa,kBAAkB,CAAC,GAAGI,MAAM,CAACF,gBAAgB,CAAC;QAC9D,OAAOE,MAAM,CAACF,gBAAgB,CAAC;MACjC;IACF;IAEA,OAAOL,QAAQ;EACjB;AACF;AAEAS,MAAM,CAACC,OAAO,GAAG;EACfzB,6BAA6B,EAAED,aAAa,CAACC,6BAA6B;AAC5E,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}