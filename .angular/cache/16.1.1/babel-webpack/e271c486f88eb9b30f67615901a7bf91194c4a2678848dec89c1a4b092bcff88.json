{"ast":null,"code":"\"use strict\";\n\nlet ErrorResponse = require(\"./error_response\").ErrorResponse;\nlet SearchResponse = require(\"./search_response\").SearchResponse;\nlet exceptions = require(\"./exceptions\");\nclass Gateway {\n  createResponseHandler(attributeKlassMap, Klass) {\n    let gateway = this.gateway;\n\n    // eslint-disable-next-line consistent-return\n    return function (response) {\n      if (response.apiErrorResponse) {\n        return Promise.resolve(new ErrorResponse(response.apiErrorResponse, gateway));\n      }\n      response.success = true;\n      if (attributeKlassMap === null) {\n        return Promise.resolve(response);\n      } else if (typeof attributeKlassMap === \"string\") {\n        let attributeName = attributeKlassMap;\n        if (response[attributeName]) {\n          if (Klass != null) {\n            response[attributeName] = new Klass(response[attributeName], gateway);\n          }\n        }\n        return Promise.resolve(response);\n      }\n      let unknown = true;\n      for (let attributeName in attributeKlassMap) {\n        if (!attributeKlassMap.hasOwnProperty(attributeName)) {\n          continue;\n        }\n        Klass = attributeKlassMap[attributeName];\n        if (response[attributeName]) {\n          unknown = false;\n          if (Klass != null) {\n            response[attributeName] = new Klass(response[attributeName], gateway);\n          }\n          return Promise.resolve(response);\n        }\n      }\n      if (unknown) {\n        return Promise.resolve(response);\n      }\n    };\n  }\n  createSearchResponse(url, search, pagingFunction, callback) {\n    let gateway = this.gateway;\n    if (callback != null) {\n      return gateway.http.post(url, {\n        search: search.toHash()\n      }, this.searchResponseHandler(pagingFunction, callback));\n    }\n    let searchResponse = new SearchResponse();\n    gateway.http.post(url, {\n      search: search.toHash()\n    }, function (err, response) {\n      if (err != null) {\n        searchResponse.setFatalError(err);\n      } else if (response.searchResults) {\n        searchResponse.setResponse(response);\n        searchResponse.setPagingFunction(pagingFunction);\n      } else if (response.apiErrorResponse) {\n        searchResponse.setFatalError(new ErrorResponse(response.apiErrorResponse, gateway));\n      } else {\n        searchResponse.setFatalError(\n        // eslint-disable-next-line new-cap\n        exceptions.UnexpectedError(\"Unexpected Error\"));\n      }\n      return searchResponse.ready();\n    });\n    return searchResponse.stream;\n  }\n  searchResponseHandler(pagingFunction, callback) {\n    let gateway = this.gateway;\n    return function (err, response) {\n      if (err) {\n        return callback(err, response);\n      }\n      if (response.searchResults) {\n        let container = new SearchResponse(pagingFunction, response);\n        return callback(null, container);\n      } else if (response.apiErrorResponse) {\n        return callback(null, new ErrorResponse(response.apiErrorResponse, gateway));\n      }\n      return callback(exceptions.UnexpectedError(\"Unexpected Error\"), null); // eslint-disable-line new-cap\n    };\n  }\n\n  pagingFunctionGenerator(search, url, SubjectType, pagedResultsKey, getSubject) {\n    return (ids, callback) => {\n      search.ids().in(ids);\n      let gateway = this.gateway;\n      gateway.http.post(`${this.config.baseMerchantPath()}/${url}`, {\n        search: search.toHash()\n      }, (err, response) => {\n        if (err) {\n          callback(err, null);\n          return;\n        } else if (pagedResultsKey in response) {\n          if (Array.isArray(getSubject(response))) {\n            getSubject(response).forEach(subject => {\n              callback(null, new SubjectType(subject, gateway));\n            });\n            return;\n          }\n          callback(null, new SubjectType(getSubject(response), gateway));\n          return;\n        }\n        callback(exceptions.UnexpectedError(\"Unexpected Error\"), null); // eslint-disable-line new-cap\n      });\n    };\n  }\n}\n\nmodule.exports = {\n  Gateway: Gateway\n};","map":{"version":3,"names":["ErrorResponse","require","SearchResponse","exceptions","Gateway","createResponseHandler","attributeKlassMap","Klass","gateway","response","apiErrorResponse","Promise","resolve","success","attributeName","unknown","hasOwnProperty","createSearchResponse","url","search","pagingFunction","callback","http","post","toHash","searchResponseHandler","searchResponse","err","setFatalError","searchResults","setResponse","setPagingFunction","UnexpectedError","ready","stream","container","pagingFunctionGenerator","SubjectType","pagedResultsKey","getSubject","ids","in","config","baseMerchantPath","Array","isArray","forEach","subject","module","exports"],"sources":["C:/Users/Vivek Jariwala/Documents/AngularProjects/BraintreePaymentProcessor/node_modules/braintree/lib/braintree/gateway.js"],"sourcesContent":["\"use strict\";\n\nlet ErrorResponse = require(\"./error_response\").ErrorResponse;\nlet SearchResponse = require(\"./search_response\").SearchResponse;\nlet exceptions = require(\"./exceptions\");\n\nclass Gateway {\n  createResponseHandler(attributeKlassMap, Klass) {\n    let gateway = this.gateway;\n\n    // eslint-disable-next-line consistent-return\n    return function (response) {\n      if (response.apiErrorResponse) {\n        return Promise.resolve(\n          new ErrorResponse(response.apiErrorResponse, gateway)\n        );\n      }\n\n      response.success = true;\n      if (attributeKlassMap === null) {\n        return Promise.resolve(response);\n      } else if (typeof attributeKlassMap === \"string\") {\n        let attributeName = attributeKlassMap;\n\n        if (response[attributeName]) {\n          if (Klass != null) {\n            response[attributeName] = new Klass(\n              response[attributeName],\n              gateway\n            );\n          }\n        }\n\n        return Promise.resolve(response);\n      }\n      let unknown = true;\n\n      for (let attributeName in attributeKlassMap) {\n        if (!attributeKlassMap.hasOwnProperty(attributeName)) {\n          continue;\n        }\n        Klass = attributeKlassMap[attributeName];\n        if (response[attributeName]) {\n          unknown = false;\n          if (Klass != null) {\n            response[attributeName] = new Klass(\n              response[attributeName],\n              gateway\n            );\n          }\n\n          return Promise.resolve(response);\n        }\n      }\n      if (unknown) {\n        return Promise.resolve(response);\n      }\n    };\n  }\n\n  createSearchResponse(url, search, pagingFunction, callback) {\n    let gateway = this.gateway;\n\n    if (callback != null) {\n      return gateway.http.post(\n        url,\n        { search: search.toHash() },\n        this.searchResponseHandler(pagingFunction, callback)\n      );\n    }\n\n    let searchResponse = new SearchResponse();\n\n    gateway.http.post(\n      url,\n      { search: search.toHash() },\n      function (err, response) {\n        if (err != null) {\n          searchResponse.setFatalError(err);\n        } else if (response.searchResults) {\n          searchResponse.setResponse(response);\n          searchResponse.setPagingFunction(pagingFunction);\n        } else if (response.apiErrorResponse) {\n          searchResponse.setFatalError(\n            new ErrorResponse(response.apiErrorResponse, gateway)\n          );\n        } else {\n          searchResponse.setFatalError(\n            // eslint-disable-next-line new-cap\n            exceptions.UnexpectedError(\"Unexpected Error\")\n          );\n        }\n\n        return searchResponse.ready();\n      }\n    );\n\n    return searchResponse.stream;\n  }\n\n  searchResponseHandler(pagingFunction, callback) {\n    let gateway = this.gateway;\n\n    return function (err, response) {\n      if (err) {\n        return callback(err, response);\n      }\n      if (response.searchResults) {\n        let container = new SearchResponse(pagingFunction, response);\n\n        return callback(null, container);\n      } else if (response.apiErrorResponse) {\n        return callback(\n          null,\n          new ErrorResponse(response.apiErrorResponse, gateway)\n        );\n      }\n\n      return callback(exceptions.UnexpectedError(\"Unexpected Error\"), null); // eslint-disable-line new-cap\n    };\n  }\n\n  pagingFunctionGenerator(\n    search,\n    url,\n    SubjectType,\n    pagedResultsKey,\n    getSubject\n  ) {\n    return (ids, callback) => {\n      search.ids().in(ids);\n      let gateway = this.gateway;\n\n      gateway.http.post(\n        `${this.config.baseMerchantPath()}/${url}`,\n        { search: search.toHash() },\n        (err, response) => {\n          if (err) {\n            callback(err, null);\n\n            return;\n          } else if (pagedResultsKey in response) {\n            if (Array.isArray(getSubject(response))) {\n              getSubject(response).forEach((subject) => {\n                callback(null, new SubjectType(subject, gateway));\n              });\n\n              return;\n            }\n\n            callback(null, new SubjectType(getSubject(response), gateway));\n\n            return;\n          }\n\n          callback(exceptions.UnexpectedError(\"Unexpected Error\"), null); // eslint-disable-line new-cap\n        }\n      );\n    };\n  }\n}\n\nmodule.exports = { Gateway: Gateway };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}